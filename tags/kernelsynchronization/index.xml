<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>KernelSynchronization on Jackson Blog</title>
    <link>https://blog.jaxwang.top/tags/kernelsynchronization/</link>
    <description>Recent content in KernelSynchronization on Jackson Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 19 May 2025 20:37:06 +0800</lastBuildDate>
    <atom:link href="https://blog.jaxwang.top/tags/kernelsynchronization/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux Kernel 内核同步之优化和内存屏障</title>
      <link>https://blog.jaxwang.top/p/linux-kernel-synchronization-optimization-memory-barriers/</link>
      <pubDate>Mon, 19 May 2025 20:37:06 +0800</pubDate>
      <guid>https://blog.jaxwang.top/p/linux-kernel-synchronization-optimization-memory-barriers/</guid>
      <description>&lt;h1 id=&#34;linux-kernel-内核同步之优化和内存屏障&#34;&gt;Linux Kernel 内核同步之优化和内存屏障&lt;/h1&gt;&#xA;&lt;p&gt;Linux Kernel 是支持优化屏障和内存屏障的，其中优化屏障是针对&lt;strong&gt;编译器&lt;/strong&gt;而言的，内存屏障是针对&lt;strong&gt;处理器&lt;/strong&gt;而言的，因此内存屏障取决于处理器架构。本文以 &lt;code&gt;ARMv8&lt;/code&gt; 架构处理器从下向上讲解内存屏障，并简述优化屏障。&lt;/p&gt;&#xA;&lt;h2 id=&#34;一linux-kernel-优化屏障&#34;&gt;一、Linux Kernel 优化屏障&lt;/h2&gt;&#xA;&lt;p&gt;编译器在编译源代码时会考虑性能进行优化重新排序指令顺序，以下面代码为例：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;volatile int a = 0;&#xA;volatile int b = 0;&#xA;&#xA;void no_barrier() {&#xA;    a = 1;&#xA;    b = 2;&#xA;}&#xA;&#xA;void with_barrier() {&#xA;    a = 1;&#xA;    asm volatile(&amp;quot;&amp;quot; ::: &amp;quot;memory&amp;quot;);  // 编译器优化屏障&#xA;    b = 2;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;aarch64-none-linux-gnu-gcc -S test.c -O3  -o test.s&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;no_barrier:&#xA;.LFB0:&#xA;        .cfi_startproc&#xA;        adrp    x0, .LANCHOR0&#xA;        add     x1, x0, :lo12:.LANCHOR0&#xA;        mov     w3, 1&#xA;        mov     w2, 2&#xA;        str     w3, [x0, #:lo12:.LANCHOR0]&#xA;        str     w2, [x1, 4]&#xA;        ret&#xA;        .cfi_endproc&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;with_barrier:&#xA;.LFB1:&#xA;        .cfi_startproc&#xA;        adrp    x0, .LANCHOR0&#xA;        mov     w2, 1&#xA;        add     x1, x0, :lo12:.LANCHOR0&#xA;        str     w2, [x0, #:lo12:.LANCHOR0]&#xA;        mov     w0, 2&#xA;        str     w0, [x1, 4]&#xA;        ret&#xA;        .cfi_endproc&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;我们只需观察 &lt;code&gt;mov&lt;/code&gt; &lt;code&gt;str&lt;/code&gt; 指令的顺序：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux Kernel 内核同步之原子操作</title>
      <link>https://blog.jaxwang.top/p/linux-kernel-synchronization-atomic-operations/</link>
      <pubDate>Sun, 18 May 2025 21:37:06 +0800</pubDate>
      <guid>https://blog.jaxwang.top/p/linux-kernel-synchronization-atomic-operations/</guid>
      <description>&lt;h1 id=&#34;linux-kernel-内核同步之原子操作&#34;&gt;Linux Kernel 内核同步之原子操作&lt;/h1&gt;&#xA;&lt;p&gt;原子操作是指指令以原子的方式执行，执行过程不会被打断。要保证操作的原子性和完整性，需要“原子地”（不间断地）完整&lt;strong&gt;读-修改-回写&lt;/strong&gt;机制。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;static int i = 0;&#xA;void thread_A _func()&#xA;{&#xA;&#x9;i++;&#xA;}&#xA;void thread_B _func()&#xA;{&#xA;&#x9;i++;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;上面代码的理想执行结果是&lt;code&gt;i&lt;/code&gt; 为 2，但事实并非如此， i 有一定的概率为 1。对于 &lt;code&gt;thread_A&lt;/code&gt; 和 &lt;code&gt;thread_B&lt;/code&gt; 进行的操作可以简单理解为：&lt;strong&gt;读 - 修改 - 回写&lt;/strong&gt;。从单处理器和多处理器角度分析：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;单处理器：&lt;code&gt;thread_A&lt;/code&gt; 与 &lt;code&gt;thread_B&lt;/code&gt; 存在并发，当 &lt;code&gt;thread_A&lt;/code&gt; 执行完 &lt;code&gt;读&lt;/code&gt; 操作，CPU 有可能切换为 &lt;code&gt;thread_B&lt;/code&gt; 执行 &lt;code&gt;读&lt;/code&gt; 操作，这样最终的结果为 1.&lt;/li&gt;&#xA;&lt;li&gt;多处理器：&lt;code&gt;thread_A&lt;/code&gt; 与 &lt;code&gt;thread_B&lt;/code&gt; 存在并发，&lt;code&gt;thread_A&lt;/code&gt; 与 &lt;code&gt;thread_B&lt;/code&gt; 可能同时执行 &lt;code&gt;读&lt;/code&gt; 操作，这样最终结果也为 1.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;因此，要想保证结果的正确性，我们必须保证上面的操作完整地原子地（不间断地）完成&lt;strong&gt;读-修改-回写&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;原子操作是以硬件为基础，即 &lt;strong&gt;CPU 必须提供原子操作的汇编指令&lt;/strong&gt;。本文以 ARMv8 架构为例从下至上分析原子操作。&lt;/p&gt;&#xA;&lt;h2 id=&#34;一arm64-原子操作&#34;&gt;一、ARM64 原子操作&lt;/h2&gt;&#xA;&lt;p&gt;原子操作需要处理器提供硬件支持，ARMv8 提供两种方式实现了原子操作：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
