<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Debug on Jackson Blog</title>
    <link>https://blog.jaxwang.top/tags/debug/</link>
    <description>Recent content in Debug on Jackson Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 19 Apr 2025 21:45:06 +0800</lastBuildDate>
    <atom:link href="https://blog.jaxwang.top/tags/debug/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Valgrind 基础介绍与框架概览</title>
      <link>https://blog.jaxwang.top/p/valgrind-intro-framework-overview/</link>
      <pubDate>Sat, 19 Apr 2025 21:45:06 +0800</pubDate>
      <guid>https://blog.jaxwang.top/p/valgrind-intro-framework-overview/</guid>
      <description>&lt;h1 id=&#34;valgrind-基础介绍与框架概览&#34;&gt;Valgrind 基础介绍与框架概览&lt;/h1&gt;&#xA;&lt;p&gt;Valgrind是一款用于内存调试、内存泄漏检测以及性能分析的软件开发工具，本文简单分析 Valgrind 基本原理及其框架组成，并记录其在嵌入式设备上的移植与调试过程。&lt;/p&gt;&#xA;&lt;center&gt;&#xA;&lt;img src=&#34;https://img.jaxwang.top/2025/05/ca0ba156ff8f0203ba14b1e713ea4318.png&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&#xA;&lt;/center&gt;&#xA;&lt;h2 id=&#34;一插桩技术概述&#34;&gt;一、插桩技术概述&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Instrumentation_(computer_programming)&#34;&gt;插桩&lt;/a&gt;（instrumentation）技术是指&lt;strong&gt;在程序源码或二进制代码中插入监测代码&lt;/strong&gt;实现对程序的监视。达到记录函数进入和退出、监控内存读写、统计执行时间、跟踪异常等。&lt;/p&gt;&#xA;&lt;p&gt;插桩在实现上可分为两类：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;静态插桩 Static Instrumentation：在程序编译之前或编译期间插入代码，即在&lt;strong&gt;源代码或中间代码&lt;/strong&gt;中插入检测代码，最终编译成带有插桩的可执行文件。&lt;/li&gt;&#xA;&lt;li&gt;动态插桩 Dynamic Binary Instrumentation DBI：在程序运行中进行插桩，其操作对象为&lt;strong&gt;机器码&lt;/strong&gt;。动态二进制插桩工具主要包含 Pin，Valgrind，DynamoRIO 等。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;二valgrind-framework&#34;&gt;二、Valgrind Framework&lt;/h2&gt;&#xA;&lt;p&gt;Valgrind 本质上是一套核心框架 framework，其提供了核心 Core 及 APIs ，在此框架基础上开发出 7 个工具：&lt;/p&gt;&#xA;&lt;center&gt;&#xA;&lt;img src=&#34;https://img.jaxwang.top/2025/05/50281872ddcb9927d56a85162f9c62f2.png&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&#xA;&lt;/center&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;工具&lt;/th&gt;&#xA;          &lt;th&gt;描述&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Memcheck&lt;/td&gt;&#xA;          &lt;td&gt;内存错误检测，用于检测内存泄漏、越界访问、使用未初始化内存等内存相关错误&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Helgrind&lt;/td&gt;&#xA;          &lt;td&gt;线程错误检测，检测数据竞争（race conditions）和死锁&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;DRD&lt;/td&gt;&#xA;          &lt;td&gt;线程错误检测，使用与 Helgrind 不同技术&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Cachegrind&lt;/td&gt;&#xA;          &lt;td&gt;缓存和分支预测分析&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Callgrind&lt;/td&gt;&#xA;          &lt;td&gt;基于 Cachegrind，但额外生成调用图，分析函数调用及其性能影响&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Massif&lt;/td&gt;&#xA;          &lt;td&gt;堆内存使用分析工具，帮助找出内存使用高峰及其来源&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;DHAT&lt;/td&gt;&#xA;          &lt;td&gt;分析堆内存分配和释放的详细情况&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;三嵌入式平台调试-memory-leak&#34;&gt;三、嵌入式平台调试 memory leak&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;指定 &lt;code&gt;toolchains&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre&gt;&lt;code&gt;export GCC_PATH=/your_path_for_linaro/bin&#xA;export CC=${GCC_PATH}/aarch64-linux-gnu-gcc&#xA;export LD=${GCC_PATH}/aarch64-linux-gnu-ld&#xA;export AR=${GCC_PATH}/aarch64-linux-gnu-ar&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;编译配置&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre&gt;&lt;code&gt;cd valgrind&#xA;./autogen.sh&#xA;./configure --prefix=`pwd`/Inst --host=aarch64-unknown-linux --enable-only64bit&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ol start=&#34;3&#34;&gt;&#xA;&lt;li&gt;编译安装&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre&gt;&lt;code&gt;make -j4 install&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ol start=&#34;4&#34;&gt;&#xA;&lt;li&gt;准备带有debug info 的 libc&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;valgrind 需要使用带调试信息的 &lt;code&gt;libc&lt;/code&gt;，否则会报 &lt;code&gt;cannot be set up&lt;/code&gt; 错误，在 &lt;code&gt;libc&lt;/code&gt; 可以在交叉编译工具链中找到。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
