<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kernel on Jackson Blog</title>
    <link>https://blog.jaxwang.top/tags/kernel/</link>
    <description>Recent content in Kernel on Jackson Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 19 May 2025 22:37:06 +0800</lastBuildDate>
    <atom:link href="https://blog.jaxwang.top/tags/kernel/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux Kernel Linux Kernel 内核同步之自旋锁</title>
      <link>https://blog.jaxwang.top/p/linux-kernel-synchronization-spinlock/</link>
      <pubDate>Mon, 19 May 2025 22:37:06 +0800</pubDate>
      <guid>https://blog.jaxwang.top/p/linux-kernel-synchronization-spinlock/</guid>
      <description>&lt;h1 id=&#34;linux-kernel-内核同步之自旋锁&#34;&gt;Linux Kernel 内核同步之自旋锁&lt;/h1&gt;&#xA;&lt;p&gt;加锁（locking）是一种广泛应用的同步技术。当要访问&lt;strong&gt;共享数据结构&lt;/strong&gt;或进入&lt;strong&gt;临界区&lt;/strong&gt;时，为自己获得一把“锁”，离开时再释放锁。在获得锁到释放锁之间的之短时间内是禁止其他 CPU 访问的。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;spin_lock(&amp;amp;lock);&#xA;...&#xA;spin_unlock(&amp;amp;lock);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;不同系统架构的自旋锁实现是不同的：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;不支持内核抢占的单处理器：自旋锁的实现是空的&lt;/li&gt;&#xA;&lt;li&gt;支持内核抢占的单处理器：自旋锁的实现仅仅是禁止或启用&lt;strong&gt;内核抢占&lt;/strong&gt;。参考下面例子：&#xA;&lt;ol&gt;&#xA;&lt;li&gt;线程 A 获得锁&lt;/li&gt;&#xA;&lt;li&gt;线程 B 抢占内核获得执行权&lt;/li&gt;&#xA;&lt;li&gt;线程 B 获取相同锁发现已被锁&lt;/li&gt;&#xA;&lt;li&gt;. 线程 B 的优先级高于线程 A，死锁&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;支持内核抢占的多处理器：需要完整实现自旋锁&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;code&gt;spin_lock&lt;/code&gt; 是不会禁用&lt;strong&gt;本地中断&lt;/strong&gt;的，但是提供了 &lt;code&gt;spin_lock_irq&lt;/code&gt; ，其不仅会禁用内核抢占并且会禁用本地中断。当需要上锁的共享资源会在中断处理中被访问，我们需要使用禁止本地中断的锁，原因如下：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;线程 A 获得锁&lt;/li&gt;&#xA;&lt;li&gt;触发中断，中断处理中要获得相同锁，死锁&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;code&gt;spin_lock_irq()&lt;/code&gt; 在任何情况下都是安全的，但是没有 &lt;code&gt;spin_lock()&lt;/code&gt; 快。[3]&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;代数&lt;/th&gt;&#xA;          &lt;th&gt;名称&lt;/th&gt;&#xA;          &lt;th&gt;内核版本&lt;/th&gt;&#xA;          &lt;th&gt;公平性&lt;/th&gt;&#xA;          &lt;th&gt;高效性&lt;/th&gt;&#xA;          &lt;th&gt;接口兼容性&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;第一代&lt;/td&gt;&#xA;          &lt;td&gt;原始自旋锁&lt;/td&gt;&#xA;          &lt;td&gt;1.0 - 2.6.24&lt;/td&gt;&#xA;          &lt;td&gt;不公平&lt;/td&gt;&#xA;          &lt;td&gt;不高效&lt;/td&gt;&#xA;          &lt;td&gt;兼容&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;第二代&lt;/td&gt;&#xA;          &lt;td&gt;ticket spinlock&lt;/td&gt;&#xA;          &lt;td&gt;2.6.25 - 4.1x&lt;/td&gt;&#xA;          &lt;td&gt;公平&lt;/td&gt;&#xA;          &lt;td&gt;不高效&lt;/td&gt;&#xA;          &lt;td&gt;兼容&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;第三代&lt;/td&gt;&#xA;          &lt;td&gt;MCS spinlock&lt;/td&gt;&#xA;          &lt;td&gt;3.15 - now&lt;/td&gt;&#xA;          &lt;td&gt;公平&lt;/td&gt;&#xA;          &lt;td&gt;高效&lt;/td&gt;&#xA;          &lt;td&gt;不兼容&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;第四代&lt;/td&gt;&#xA;          &lt;td&gt;queued spinlock&lt;/td&gt;&#xA;          &lt;td&gt;4.2 - now&lt;/td&gt;&#xA;          &lt;td&gt;公平&lt;/td&gt;&#xA;          &lt;td&gt;高效&lt;/td&gt;&#xA;          &lt;td&gt;兼容&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;自旋锁首次提出之后又经历了三次迭代，下面对其简述：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux Kernel 内核同步之优化和内存屏障</title>
      <link>https://blog.jaxwang.top/p/linux-kernel-synchronization-optimization-memory-barriers/</link>
      <pubDate>Mon, 19 May 2025 20:37:06 +0800</pubDate>
      <guid>https://blog.jaxwang.top/p/linux-kernel-synchronization-optimization-memory-barriers/</guid>
      <description>&lt;h1 id=&#34;linux-kernel-内核同步之优化和内存屏障&#34;&gt;Linux Kernel 内核同步之优化和内存屏障&lt;/h1&gt;&#xA;&lt;p&gt;Linux Kernel 是支持优化屏障和内存屏障的，其中优化屏障是针对&lt;strong&gt;编译器&lt;/strong&gt;而言的，内存屏障是针对&lt;strong&gt;处理器&lt;/strong&gt;而言的，因此内存屏障取决于处理器架构。本文以 &lt;code&gt;ARMv8&lt;/code&gt; 架构处理器从下向上讲解内存屏障，并简述优化屏障。&lt;/p&gt;&#xA;&lt;h2 id=&#34;一linux-kernel-优化屏障&#34;&gt;一、Linux Kernel 优化屏障&lt;/h2&gt;&#xA;&lt;p&gt;编译器在编译源代码时会考虑性能进行优化重新排序指令顺序，以下面代码为例：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;volatile int a = 0;&#xA;volatile int b = 0;&#xA;&#xA;void no_barrier() {&#xA;    a = 1;&#xA;    b = 2;&#xA;}&#xA;&#xA;void with_barrier() {&#xA;    a = 1;&#xA;    asm volatile(&amp;quot;&amp;quot; ::: &amp;quot;memory&amp;quot;);  // 编译器优化屏障&#xA;    b = 2;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;aarch64-none-linux-gnu-gcc -S test.c -O3  -o test.s&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;no_barrier:&#xA;.LFB0:&#xA;        .cfi_startproc&#xA;        adrp    x0, .LANCHOR0&#xA;        add     x1, x0, :lo12:.LANCHOR0&#xA;        mov     w3, 1&#xA;        mov     w2, 2&#xA;        str     w3, [x0, #:lo12:.LANCHOR0]&#xA;        str     w2, [x1, 4]&#xA;        ret&#xA;        .cfi_endproc&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;with_barrier:&#xA;.LFB1:&#xA;        .cfi_startproc&#xA;        adrp    x0, .LANCHOR0&#xA;        mov     w2, 1&#xA;        add     x1, x0, :lo12:.LANCHOR0&#xA;        str     w2, [x0, #:lo12:.LANCHOR0]&#xA;        mov     w0, 2&#xA;        str     w0, [x1, 4]&#xA;        ret&#xA;        .cfi_endproc&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;我们只需观察 &lt;code&gt;mov&lt;/code&gt; &lt;code&gt;str&lt;/code&gt; 指令的顺序：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux Kernel 内核同步之原子操作</title>
      <link>https://blog.jaxwang.top/p/linux-kernel-synchronization-atomic-operations/</link>
      <pubDate>Sun, 18 May 2025 21:37:06 +0800</pubDate>
      <guid>https://blog.jaxwang.top/p/linux-kernel-synchronization-atomic-operations/</guid>
      <description>&lt;h1 id=&#34;linux-kernel-内核同步之原子操作&#34;&gt;Linux Kernel 内核同步之原子操作&lt;/h1&gt;&#xA;&lt;p&gt;原子操作是指指令以原子的方式执行，执行过程不会被打断。要保证操作的原子性和完整性，需要“原子地”（不间断地）完整&lt;strong&gt;读-修改-回写&lt;/strong&gt;机制。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;static int i = 0;&#xA;void thread_A _func()&#xA;{&#xA;&#x9;i++;&#xA;}&#xA;void thread_B _func()&#xA;{&#xA;&#x9;i++;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;上面代码的理想执行结果是&lt;code&gt;i&lt;/code&gt; 为 2，但事实并非如此， i 有一定的概率为 1。对于 &lt;code&gt;thread_A&lt;/code&gt; 和 &lt;code&gt;thread_B&lt;/code&gt; 进行的操作可以简单理解为：&lt;strong&gt;读 - 修改 - 回写&lt;/strong&gt;。从单处理器和多处理器角度分析：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;单处理器：&lt;code&gt;thread_A&lt;/code&gt; 与 &lt;code&gt;thread_B&lt;/code&gt; 存在并发，当 &lt;code&gt;thread_A&lt;/code&gt; 执行完 &lt;code&gt;读&lt;/code&gt; 操作，CPU 有可能切换为 &lt;code&gt;thread_B&lt;/code&gt; 执行 &lt;code&gt;读&lt;/code&gt; 操作，这样最终的结果为 1.&lt;/li&gt;&#xA;&lt;li&gt;多处理器：&lt;code&gt;thread_A&lt;/code&gt; 与 &lt;code&gt;thread_B&lt;/code&gt; 存在并发，&lt;code&gt;thread_A&lt;/code&gt; 与 &lt;code&gt;thread_B&lt;/code&gt; 可能同时执行 &lt;code&gt;读&lt;/code&gt; 操作，这样最终结果也为 1.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;因此，要想保证结果的正确性，我们必须保证上面的操作完整地原子地（不间断地）完成&lt;strong&gt;读-修改-回写&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;原子操作是以硬件为基础，即 &lt;strong&gt;CPU 必须提供原子操作的汇编指令&lt;/strong&gt;。本文以 ARMv8 架构为例从下至上分析原子操作。&lt;/p&gt;&#xA;&lt;h2 id=&#34;一arm64-原子操作&#34;&gt;一、ARM64 原子操作&lt;/h2&gt;&#xA;&lt;p&gt;原子操作需要处理器提供硬件支持，ARMv8 提供两种方式实现了原子操作：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux Kernel 数据结构分析之链表</title>
      <link>https://blog.jaxwang.top/p/linux-data-structure-list/</link>
      <pubDate>Wed, 30 Apr 2025 15:07:00 +0800</pubDate>
      <guid>https://blog.jaxwang.top/p/linux-data-structure-list/</guid>
      <description>&lt;h1 id=&#34;linux-kernel-数据结构分析之链表&#34;&gt;Linux Kernel 数据结构分析之链表&lt;/h1&gt;&#xA;&lt;p&gt;Linux Kernel 中实现了以下两种链表：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;双向循环链表&lt;/li&gt;&#xA;&lt;li&gt;hash 链表&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;本文将分别分析两种链表的实现。&lt;/p&gt;&#xA;&lt;h2 id=&#34;一双向循环链表&#34;&gt;一、双向循环链表&lt;/h2&gt;&#xA;&lt;p&gt;Linux 使用了最简洁的方式实现了一个几乎是万能的链表，其通过将 &lt;code&gt;struct list_head&lt;/code&gt; &lt;strong&gt;嵌入到其他结构体中&lt;/strong&gt;，实现双向循环链表。并在 &lt;code&gt;include/linux/list.h&lt;/code&gt; 定义了支持的所有操作。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;// include/linux/types.h&#xA;&#xA;struct list_head {&#xA;&#x9;struct list_head *next, *prev;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;以 &lt;code&gt;keme_caches&lt;/code&gt; 链表进行分析。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// mm/slab_common.c&#xA;&#xA;LIST_HEAD(slab_caches);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;// mm/slab.h&#xA;&#xA;struct kmem_cache {&#xA;    ....&#xA;    struct list_head list;&#x9;&#x9;/* List of slab caches */&#xA;    ....&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;center&gt;&lt;img src=&#34;https://img.jaxwang.top/2025/04/c8590fa84ab49e876bb5296f2dc13712.png&#34; width=&#34;70%&#34; height=&#34;70%&#34;&gt; &lt;/center&gt;&#xA;&lt;p&gt;上面的例子中，指针指向是 &lt;code&gt;struct kmem_cache&lt;/code&gt; 中 &lt;code&gt;list&lt;/code&gt; 成员。通过这个成员的地址获得 &lt;code&gt;struct kmem_cache&lt;/code&gt; 的地址的操作，在 Linux 中通过 &lt;code&gt;list_entry&lt;/code&gt; 实现。下面分析其实现逻辑。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// include/linux/list.h&#xA;&#xA;/**&#xA; * list_entry - get the struct for this entry&#xA; * @ptr:&#x9;the &amp;amp;struct list_head pointer.&#xA; * @type:&#x9;the type of the struct this is embedded in.&#xA; * @member:&#x9;the name of the list_head within the struct.&#xA; */&#xA;#define list_entry(ptr, type, member) \&#xA;&#x9;container_of(ptr, type, member)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;// include/linux/container_of.h&#xA;&#xA;/**&#xA; * container_of - cast a member of a structure out to the containing structure&#xA; * @ptr:&#x9;the pointer to the member.&#xA; * @type:&#x9;the type of the container struct this is embedded in.&#xA; * @member:&#x9;the name of the member within the struct.&#xA; *&#xA; * WARNING: any const qualifier of @ptr is lost.&#xA; */&#xA;#define container_of(ptr, type, member) ({&#x9;&#x9;&#x9;&#x9;\&#xA;&#x9;void *__mptr = (void *)(ptr);&#x9;&#x9;&#x9;&#x9;&#x9;\&#xA;&#x9;static_assert(__same_type(*(ptr), ((type *)0)-&amp;gt;member) ||&#x9;\&#xA;&#x9;&#x9;      __same_type(*(ptr), void),&#x9;&#x9;&#x9;\&#xA;&#x9;&#x9;      &amp;quot;pointer type mismatch in container_of()&amp;quot;);&#x9;\&#xA;&#x9;((type *)(__mptr - offsetof(type, member))); })&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;// tools/include/linux/kernel.h&#xA;&#xA;#ifndef offsetof&#xA;#define offsetof(TYPE, MEMBER) ((size_t) &amp;amp;((TYPE *)0)-&amp;gt;MEMBER)&#xA;#endif&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;offsetof&lt;/code&gt; 计算结构体中某个成员的偏移量，其通过强转假设地址 0 处有一个 TYPE 类型的结构体，&lt;code&gt;-&amp;gt;&lt;/code&gt;指针取结构体成员 Member，最后通过 &lt;code&gt;&amp;amp;&lt;/code&gt; 获得 Member 的地址，并强转为 &lt;code&gt;size_t&lt;/code&gt; 类型。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;container_of&lt;/code&gt; 利用成员指针，获得结构体的指针。&lt;strong&gt;成员指针 - 成员的偏移量=结构体指针&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;list_entry&lt;/code&gt; list_head 作为一个成员嵌入到结构体中，已知 list_head 指针，调用 &lt;code&gt;container_of&lt;/code&gt; 获得结构体指针。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;二hash-链表&#34;&gt;二、hash 链表&lt;/h2&gt;&#xA;&lt;p&gt;linux kernel 中定义 &lt;code&gt;hlist_head&lt;/code&gt; 用作 hash 表中的链表头，&lt;code&gt;hlist_node&lt;/code&gt; 用作链表中的某一项。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux Kernel 内存管理之物理内存模型</title>
      <link>https://blog.jaxwang.top/p/linux-kernel-memory-physical-memory-model/</link>
      <pubDate>Tue, 29 Apr 2025 16:30:00 +0800</pubDate>
      <guid>https://blog.jaxwang.top/p/linux-kernel-memory-physical-memory-model/</guid>
      <description>&lt;h1 id=&#34;linux-kernel-内存管理之物理内存模型&#34;&gt;Linux Kernel 内存管理之物理内存模型&lt;/h1&gt;&#xA;&lt;p&gt;4GB RAM 4KB 页面大小的 Linux 系统会产生一百万之多的 &lt;code&gt;struct page&lt;/code&gt;，组织管理这些结构体的方式我们称为内存模型。Linux 目前支持两种模型：&lt;code&gt;FLATMEM&lt;/code&gt; &lt;code&gt;SPARSEMEM&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;p&gt;无论选择哪个内存模型，都会通过&lt;strong&gt;一个或多个数组&lt;/strong&gt;管理 &lt;code&gt;struct page&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;一内存空洞-memory-hole&#34;&gt;一、内存空洞 memory hole&lt;/h2&gt;&#xA;&lt;p&gt;事实上 RAM 只是物理地址空间的一部分，物理地址空间通常会出现一部分地址是不用做普通内存使用的，对于这地址我们称之为&lt;strong&gt;内存空洞 Memory Hole&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;使用 &lt;code&gt;qemu-system-x86_64 -m 8G &lt;/code&gt; 启动 Kernel，可以看到下面 log&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;[    0.000000] BIOS-provided physical RAM map:&#xA;[    0.000000] BIOS-e820: [mem 0x0000000000000000-0x000000000009fbff] usable&#xA;[    0.000000] BIOS-e820: [mem 0x000000000009fc00-0x000000000009ffff] reserved&#xA;[    0.000000] BIOS-e820: [mem 0x00000000000f0000-0x00000000000fffff] reserved&#xA;[    0.000000] BIOS-e820: [mem 0x0000000000100000-0x00000000bffdffff] usable&#xA;[    0.000000] BIOS-e820: [mem 0x00000000bffe0000-0x00000000bfffffff] reserved&#xA;[    0.000000] BIOS-e820: [mem 0x00000000fffc0000-0x00000000ffffffff] reserved&#xA;[    0.000000] BIOS-e820: [mem 0x0000000100000000-0x000000023fffffff] usable&#xA;[    0.000000] BIOS-e820: [mem 0x000000fd00000000-0x000000ffffffffff] reserved&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;对于其中 &lt;code&gt;reserved&lt;/code&gt; 的部分是不可作为普通内存使用的。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
