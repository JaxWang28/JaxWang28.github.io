<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kernel on Jackson Blog</title>
    <link>https://blog.jaxwang.top/tags/kernel/</link>
    <description>Recent content in Kernel on Jackson Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 30 Apr 2025 15:07:00 +0800</lastBuildDate>
    <atom:link href="https://blog.jaxwang.top/tags/kernel/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux Kernel 数据结构分析之链表</title>
      <link>https://blog.jaxwang.top/p/linux-data-structure-list/</link>
      <pubDate>Wed, 30 Apr 2025 15:07:00 +0800</pubDate>
      <guid>https://blog.jaxwang.top/p/linux-data-structure-list/</guid>
      <description>&lt;h1 id=&#34;linux-kernel-数据结构分析之链表&#34;&gt;Linux Kernel 数据结构分析之链表&lt;/h1&gt;&#xA;&lt;p&gt;Linux Kernel 中实现了以下两种链表：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;双向循环链表&lt;/li&gt;&#xA;&lt;li&gt;hash 链表&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;本文将分别分析两种链表的实现。&lt;/p&gt;&#xA;&lt;h2 id=&#34;一双向循环链表&#34;&gt;一、双向循环链表&lt;/h2&gt;&#xA;&lt;p&gt;Linux 使用了最简洁的方式实现了一个几乎是万能的链表，其通过将 &lt;code&gt;struct list_head&lt;/code&gt; &lt;strong&gt;嵌入到其他结构体中&lt;/strong&gt;，实现双向循环链表。并在 &lt;code&gt;include/linux/list.h&lt;/code&gt; 定义了支持的所有操作。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;// include/linux/types.h&#xA;&#xA;struct list_head {&#xA;&#x9;struct list_head *next, *prev;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;以 &lt;code&gt;keme_caches&lt;/code&gt; 链表进行分析。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// mm/slab_common.c&#xA;&#xA;LIST_HEAD(slab_caches);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;// mm/slab.h&#xA;&#xA;struct kmem_cache {&#xA;    ....&#xA;    struct list_head list;&#x9;&#x9;/* List of slab caches */&#xA;    ....&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;img src=&#34;https://img.jaxwang.top/2025/04/c8590fa84ab49e876bb5296f2dc13712.png&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&#xA;&lt;p&gt;上面的例子中，指针指向是 &lt;code&gt;struct kmem_cache&lt;/code&gt; 中 &lt;code&gt;list&lt;/code&gt; 成员。通过这个成员的地址获得 &lt;code&gt;struct kmem_cache&lt;/code&gt; 的地址的操作，在 Linux 中通过 &lt;code&gt;list_entry&lt;/code&gt; 实现。下面分析其实现逻辑。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// include/linux/list.h&#xA;&#xA;/**&#xA; * list_entry - get the struct for this entry&#xA; * @ptr:&#x9;the &amp;amp;struct list_head pointer.&#xA; * @type:&#x9;the type of the struct this is embedded in.&#xA; * @member:&#x9;the name of the list_head within the struct.&#xA; */&#xA;#define list_entry(ptr, type, member) \&#xA;&#x9;container_of(ptr, type, member)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;// include/linux/container_of.h&#xA;&#xA;/**&#xA; * container_of - cast a member of a structure out to the containing structure&#xA; * @ptr:&#x9;the pointer to the member.&#xA; * @type:&#x9;the type of the container struct this is embedded in.&#xA; * @member:&#x9;the name of the member within the struct.&#xA; *&#xA; * WARNING: any const qualifier of @ptr is lost.&#xA; */&#xA;#define container_of(ptr, type, member) ({&#x9;&#x9;&#x9;&#x9;\&#xA;&#x9;void *__mptr = (void *)(ptr);&#x9;&#x9;&#x9;&#x9;&#x9;\&#xA;&#x9;static_assert(__same_type(*(ptr), ((type *)0)-&amp;gt;member) ||&#x9;\&#xA;&#x9;&#x9;      __same_type(*(ptr), void),&#x9;&#x9;&#x9;\&#xA;&#x9;&#x9;      &amp;quot;pointer type mismatch in container_of()&amp;quot;);&#x9;\&#xA;&#x9;((type *)(__mptr - offsetof(type, member))); })&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;// tools/include/linux/kernel.h&#xA;&#xA;#ifndef offsetof&#xA;#define offsetof(TYPE, MEMBER) ((size_t) &amp;amp;((TYPE *)0)-&amp;gt;MEMBER)&#xA;#endif&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;offsetof&lt;/code&gt; 计算结构体中某个成员的偏移量，其通过强转假设地址 0 处有一个 TYPE 类型的结构体，&lt;code&gt;-&amp;gt;&lt;/code&gt;指针取结构体成员 Member，最后通过 &lt;code&gt;&amp;amp;&lt;/code&gt; 获得 Member 的地址，并强转为 &lt;code&gt;size_t&lt;/code&gt; 类型。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;container_of&lt;/code&gt; 利用成员指针，获得结构体的指针。&lt;strong&gt;成员指针 - 成员的偏移量=结构体指针&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;list_entry&lt;/code&gt; list_head 作为一个成员嵌入到结构体中，已知 list_head 指针，调用 &lt;code&gt;container_of&lt;/code&gt; 获得结构体指针。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;二hash-链表&#34;&gt;二、hash 链表&lt;/h2&gt;&#xA;&lt;p&gt;linux kernel 中定义 &lt;code&gt;hlist_head&lt;/code&gt; 用作 hash 表中的链表头，&lt;code&gt;hlist_node&lt;/code&gt; 用作链表中的某一项。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
