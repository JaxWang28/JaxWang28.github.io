<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OpenWRT on Jackson Blog</title>
    <link>https://blog.jaxwang.top/tags/openwrt/</link>
    <description>Recent content in OpenWRT on Jackson Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 Jul 2024 20:47:05 +0800</lastBuildDate>
    <atom:link href="https://blog.jaxwang.top/tags/openwrt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OpenWRT ubus 框架</title>
      <link>https://blog.jaxwang.top/p/openwrt-ubus/</link>
      <pubDate>Sun, 28 Jul 2024 20:47:05 +0800</pubDate>
      <guid>https://blog.jaxwang.top/p/openwrt-ubus/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://openwrt.org/docs/techref/ubus&#34;&gt;https://openwrt.org/docs/techref/ubus&lt;/a&gt; &lt;br&gt;&#xA;&lt;a href=&#34;https://hackmd.io/@rYMqzC-9Rxy0Isn3zClURg/H1BY98bRw&#34;&gt;https://hackmd.io/@rYMqzC-9Rxy0Isn3zClURg/H1BY98bRw&lt;/a&gt; &lt;br&gt;&lt;/p&gt;&#xA;&lt;p&gt;一直在使用 ubus，系统性学习一下，并准备用 rust 重构一把。&lt;/p&gt;&#xA;&lt;h1 id=&#34;ubus-概述&#34;&gt;ubus 概述&lt;/h1&gt;&#xA;&lt;p&gt;ubus 是一个 OpenWRT 中的 RPC 工具，其主要目的就是提供系统级进程间通信。&lt;br&gt;&#xA;其核心是 ubusd daemon，提供接口给任何其他 daemon 程序进行注册或发送信息。该接口使用 unix socket 实现，并使用 TLV 格式消息。&lt;br&gt;&#xA;ubus 提供了 3 种工具：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;libubus&lt;/li&gt;&#xA;&lt;li&gt;command-line tool ubus&lt;/li&gt;&#xA;&lt;li&gt;ubus lua module&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;ubus-通信模型&#34;&gt;ubus 通信模型&lt;/h1&gt;&#xA;&lt;p&gt;先看一下我们常见的 client-server 模型。&lt;br&gt;&#xA;&lt;img src=&#34;https://img.jaxwang.top/2024/07/c22c0e7464b519259d48e4ebc919159c.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;假设有 n 个程序，那么进程间通信的总 IPC 连接数将达到 n 的累加，这是非常惊人的数量。&lt;br&gt;&lt;/p&gt;&#xA;&lt;p&gt;使用 ubus IPC 模型。&lt;br&gt;&#xA;&lt;img src=&#34;https://img.jaxwang.top/2024/07/337b7ddfd0334542f502db331c62f034.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;ubus daemon&lt;/strong&gt;：作为代理人，负责转发注册。&lt;br&gt;&#xA;&lt;strong&gt;ubus server object&lt;/strong&gt;：一些软件或守护进程提供接口，供其他软件调用。Server object 以及其注册的方法可以被 client 调用。&lt;br&gt;&#xA;&lt;strong&gt;ubus client object&lt;/strong&gt;：调用者。&lt;br&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;ubus-工作模式&#34;&gt;ubus 工作模式&lt;/h1&gt;&#xA;&lt;h2 id=&#34;invoke&#34;&gt;Invoke&lt;/h2&gt;&#xA;&lt;p&gt;一对一的通信模式。&#xA;&lt;img src=&#34;https://img.jaxwang.top/2024/07/7f0b542ed8e100a5d92fe23e8849761f.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img.jaxwang.top/2024/07/a9062b48edd65822cecef2a0950fb7ab.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;subscribenotify&#34;&gt;Subscribe/notify&lt;/h2&gt;&#xA;&lt;p&gt;一对多的通信模式，以 object 进行分组。&lt;br&gt;&#xA;&lt;img src=&#34;https://img.jaxwang.top/2024/07/b3b08c141488348f69b93a602dd9a366.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenWRT 构建 Rust Package</title>
      <link>https://blog.jaxwang.top/p/openwrt-rust-package-build/</link>
      <pubDate>Sun, 28 Jul 2024 11:29:49 +0800</pubDate>
      <guid>https://blog.jaxwang.top/p/openwrt-rust-package-build/</guid>
      <description>&lt;h1 id=&#34;openwrt-构建系统搭建&#34;&gt;OpenWRT 构建系统搭建&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;源码下载&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre&gt;&lt;code&gt;git clone  https://github.com/openwrt/openwrt.git&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;版本更改&#xA;OpenWRT 从 &lt;a href=&#34;https://openwrt.org/releases/23.05/notes-23.05.0&#34;&gt;23.05.0&lt;/a&gt; 提供了 Rust Package Support&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre&gt;&lt;code&gt;git checkout v23.05.4&#xA;# clean&#xA;make distclean&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ol start=&#34;3&#34;&gt;&#xA;&lt;li&gt;package 安装&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre&gt;&lt;code&gt;./scripts/feeds update -a&#xA;./scripts/feeds install -a&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;ls ls feeds/packages/lang/rust/&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ol start=&#34;4&#34;&gt;&#xA;&lt;li&gt;构建交叉编译环境配置文件&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre&gt;&lt;code&gt;make menuconfig&#xA;勾选 Languages-&amp;gt;rust&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ol start=&#34;5&#34;&gt;&#xA;&lt;li&gt;编译交叉工具链&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre&gt;&lt;code&gt;make toolchain/install&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ol start=&#34;6&#34;&gt;&#xA;&lt;li&gt;调整 PATH 环境变量 目标无关工具和工具链被部署到 &lt;code&gt;staging_dir/host/&lt;/code&gt; 和 &lt;code&gt;staging_dir/toolchain/&lt;/code&gt; 目录。&lt;code&gt;staging_dir/host/bin&lt;/code&gt; 可以找到相关的可执行文件。我们将其添加到 PATH 环境变量中方便我们直接使用。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre&gt;&lt;code&gt;export PATH=/home/buildbot/source/staging_dir/host/bin:$PATH&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;源码准备&#34;&gt;源码准备&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;在 openwrt 的源码目录下执行&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre&gt;&lt;code&gt;cargo new helloworld-rs&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;创建-package&#34;&gt;创建 package&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;在 openwrt source code 下创建一个 feed 仓库，并创建一个 examples 类别。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre&gt;&lt;code&gt;mkdir -p mypackages/examples&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;向该仓库中添加个一 helloworld-rs package&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre&gt;&lt;code&gt;cd mypackages/examples&#xA;mkdir helloworld-rs&#xA;touch Makefile&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;每一个 package 都需要一个 Package Manifest 来描述这个 package，如从何处下载源码，如何构建源码。使用下面 Makefile 来实现，其中 SOURCE_DIR 就表明了获取源码的途径。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenWRT 构建个人 Package</title>
      <link>https://blog.jaxwang.top/p/openwrt-new-package-build/</link>
      <pubDate>Sat, 27 Jul 2024 18:30:52 +0800</pubDate>
      <guid>https://blog.jaxwang.top/p/openwrt-new-package-build/</guid>
      <description>&lt;p&gt;最权威官方指导： &lt;a href=&#34;https://openwrt.org/docs/guide-developer/helloworld/start&#34;&gt;https://openwrt.org/docs/guide-developer/helloworld/start&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;openwrt-编译系统准备&#34;&gt;OpenWRT 编译系统准备&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;源码下载&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre&gt;&lt;code&gt;git clone  https://github.com/openwrt/openwrt.git&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;版本更改&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre&gt;&lt;code&gt;git checkout v23.05.4&#xA;make distclean&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ol start=&#34;3&#34;&gt;&#xA;&lt;li&gt;安装更新 feeds 避免后面出现问题&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre&gt;&lt;code&gt;./scripts/feeds update -a&#xA;./scripts/feeds install -a&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ol start=&#34;4&#34;&gt;&#xA;&lt;li&gt;配置交叉编译环境&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre&gt;&lt;code&gt;make menuconfig&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ol start=&#34;5&#34;&gt;&#xA;&lt;li&gt;编译交叉工具链&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre&gt;&lt;code&gt;make toolchain/install&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ol start=&#34;6&#34;&gt;&#xA;&lt;li&gt;调整 PATH 环境变量&#xA;目标无关工具和工具链被部署到 &lt;code&gt;staging_dir/host/&lt;/code&gt; 和 &lt;code&gt;staging_dir/toolchain/&lt;/code&gt; 目录。&lt;code&gt;staging_dir/host/bin&lt;/code&gt; 可以找到相关的可执行文件。我们将其添加到 PATH 环境变量中方便我们直接使用。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre&gt;&lt;code&gt;export PATH=/home/buildbot/source/staging_dir/host/bin:$PATH&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;源码准备&#34;&gt;源码准备&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;在 openwrt 的源码目录创建一个 &lt;code&gt;helloworld&lt;/code&gt; 目录，并创建 &lt;code&gt;helloworld.c&lt;/code&gt; 文件。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre&gt;&lt;code&gt;mkdir helloworld&#xA;touch helloworld.c&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;helloworld.c 如下&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;&#xA; &#xA;int main(void)&#xA;{&#xA;    printf(&amp;quot;\nHello, world!\n\n&amp;quot;);&#xA;&#x9;return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;创建-package&#34;&gt;创建 package&lt;/h1&gt;&#xA;&lt;p&gt;OpenWRT 高度依赖 &lt;strong&gt;package&lt;/strong&gt; 的概念，几乎所有软件都是从 package 而来，包括交叉编译工具甚至是 kernel。&lt;br&gt;&#xA;而 &lt;strong&gt;feed&lt;/strong&gt; 是一个包含多个软件包的集合。它类似于一个软件仓库，提供各种可安装的软件包和依赖项。它本质上就是一个仓库，可以是本地的，也可以是网络上的，例如 Github。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
