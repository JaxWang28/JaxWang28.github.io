<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OpenWRT on Jackson Blog</title>
    <link>https://blog.jaxwang.top/tags/openwrt/</link>
    <description>Recent content in OpenWRT on Jackson Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 Jul 2024 20:47:05 +0800</lastBuildDate>
    <atom:link href="https://blog.jaxwang.top/tags/openwrt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OpenWRT ubus 框架</title>
      <link>https://blog.jaxwang.top/p/openwrt_ubus/</link>
      <pubDate>Sun, 28 Jul 2024 20:47:05 +0800</pubDate>
      <guid>https://blog.jaxwang.top/p/openwrt_ubus/</guid>
      <description>https://openwrt.org/docs/techref/ubus&#xA;https://hackmd.io/@rYMqzC-9Rxy0Isn3zClURg/H1BY98bRw&#xA;一直在使用 ubus，系统性学习一下，并准备用 rust 重构一把。&#xA;ubus 概述 ubus 是一个 OpenWRT 中的 RPC 工具，其主要目的就是提供系统级进程间通信。&#xA;其核心是 ubusd daemon，提供接口给任何其他 daemon 程序进行注册或发送信息。该接口使用 unix socket 实现，并使用 TLV 格式消息。&#xA;ubus 提供了 3 种工具：&#xA;libubus command-line tool ubus ubus lua module ubus 通信模型 先看一下我们常见的 client-server 模型。&#xA;假设有 n 个程序，那么进程间通信的总 IPC 连接数将达到 n 的累加，这是非常惊人的数量。&#xA;使用 ubus IPC 模型。&#xA;ubus daemon：作为代理人，负责转发注册。&#xA;ubus server object：一些软件或守护进程提供接口，供其他软件调用。Server object 以及其注册的方法可以被 client 调用。&#xA;ubus client object：调用者。&#xA;ubus 工作模式 Invoke 一对一的通信模式。 Subscribe/notify 一对多的通信模式，以 object 进行分组。</description>
    </item>
    <item>
      <title>OpenWRT 构建 Rust Package</title>
      <link>https://blog.jaxwang.top/p/openwrt_rust_package_build/</link>
      <pubDate>Sun, 28 Jul 2024 11:29:49 +0800</pubDate>
      <guid>https://blog.jaxwang.top/p/openwrt_rust_package_build/</guid>
      <description>OpenWRT 构建系统搭建 源码下载 git clone https://github.com/openwrt/openwrt.git 版本更改 OpenWRT 从 23.05.0 提供了 Rust Package Support git checkout v23.05.4 # clean make distclean package 安装 ./scripts/feeds update -a ./scripts/feeds install -a ls ls feeds/packages/lang/rust/ 构建交叉编译环境配置文件 make menuconfig 勾选 Languages-&amp;gt;rust 编译交叉工具链 make toolchain/install 调整 PATH 环境变量 目标无关工具和工具链被部署到 staging_dir/host/ 和 staging_dir/toolchain/ 目录。staging_dir/host/bin 可以找到相关的可执行文件。我们将其添加到 PATH 环境变量中方便我们直接使用。 export PATH=/home/buildbot/source/staging_dir/host/bin:$PATH 源码准备 在 openwrt 的源码目录下执行 cargo new helloworld-rs 创建 package 在 openwrt source code 下创建一个 feed 仓库，并创建一个 examples 类别。 mkdir -p mypackages/examples 向该仓库中添加个一 helloworld-rs package cd mypackages/examples mkdir helloworld-rs touch Makefile 每一个 package 都需要一个 Package Manifest 来描述这个 package，如从何处下载源码，如何构建源码。使用下面 Makefile 来实现，其中 SOURCE_DIR 就表明了获取源码的途径。</description>
    </item>
    <item>
      <title>OpenWRT 构建个人 Package</title>
      <link>https://blog.jaxwang.top/p/openwrt_new_package_build/</link>
      <pubDate>Sat, 27 Jul 2024 18:30:52 +0800</pubDate>
      <guid>https://blog.jaxwang.top/p/openwrt_new_package_build/</guid>
      <description>最权威官方指导： https://openwrt.org/docs/guide-developer/helloworld/start&#xA;OpenWRT 编译系统准备 源码下载 git clone https://github.com/openwrt/openwrt.git 版本更改 git checkout v23.05.4 make distclean 安装更新 feeds 避免后面出现问题 ./scripts/feeds update -a ./scripts/feeds install -a 配置交叉编译环境 make menuconfig 编译交叉工具链 make toolchain/install 调整 PATH 环境变量 目标无关工具和工具链被部署到 staging_dir/host/ 和 staging_dir/toolchain/ 目录。staging_dir/host/bin 可以找到相关的可执行文件。我们将其添加到 PATH 环境变量中方便我们直接使用。 export PATH=/home/buildbot/source/staging_dir/host/bin:$PATH 源码准备 在 openwrt 的源码目录创建一个 helloworld 目录，并创建 helloworld.c 文件。 mkdir helloworld touch helloworld.c helloworld.c 如下 #include &amp;lt;stdio.h&amp;gt; int main(void) { printf(&amp;quot;\nHello, world!\n\n&amp;quot;); return 0; } 创建 package OpenWRT 高度依赖 package 的概念，几乎所有软件都是从 package 而来，包括交叉编译工具甚至是 kernel。</description>
    </item>
  </channel>
</rss>
