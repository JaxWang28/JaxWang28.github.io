<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Jackson Blog</title>
    <link>https://blog.jaxwang28.top/post/</link>
    <description>Recent content in Posts on Jackson Blog</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 20 May 2025 20:37:06 +0800</lastBuildDate>
    <atom:link href="https://blog.jaxwang28.top/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux Kernel 内核同步之 RCU</title>
      <link>https://blog.jaxwang28.top/p/linux-kernel-synchronization-rcu/</link>
      <pubDate>Tue, 20 May 2025 20:37:06 +0800</pubDate>
      <guid>https://blog.jaxwang28.top/p/linux-kernel-synchronization-rcu/</guid>
      <description>&lt;h1 id=&#34;linux-kernel-内核同步之-rcu&#34;&gt;Linux Kernel 内核同步之 RCU&lt;/h1&gt;&#xA;&lt;p&gt;尽管 &lt;code&gt;rwlock&lt;/code&gt; 相对于 &lt;code&gt;spinlock&lt;/code&gt; 做了很大的改进，&lt;code&gt;rwlock&lt;/code&gt; 允许多个读者同时并发访问。但是进行写操作时，仅有一个写者具有访问权限，读者不可访问。&lt;code&gt;RCU&lt;/code&gt; 进一步改善了这个问题，其允许多个读者和写者并发执行。而且 &lt;code&gt;RCU&lt;/code&gt; 是不使用锁的，其对读者几乎没有限制，访问效率极高。本文简单概述这项技术。&lt;/p&gt;&#xA;&lt;h2 id=&#34;一rcu-概念理解&#34;&gt;一、RCU 概念理解&lt;/h2&gt;&#xA;&lt;p&gt;以下面的情景引出 RCU 。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;假设你写好一份作业，某一时刻同学A 找到你想借鉴一下你的作业，你把作业放在桌子上让同学A 借鉴。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;没过几分钟（同学A 还在借鉴 :) ），同学B 也来找到你，也想借鉴你一下你的作业，你指了指正在借鉴作业的同学A，说：“过去吧，你们两一起借鉴。”&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;突然，你发现你的作业错写了一步，同学A 和同学B 正在借鉴（读操作）你的作业，此时你又没法修改（不可打断同学A 和同学B，也不能他们读的同时你修改）。怎么办？&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;你以迅雷不及掩耳之势拿出一张A4纸（假设本次作业就是一张 A4纸），copy 原作页并开始改正。好巧不巧，此时同学C 又来借鉴你的作业了，而你此时还没改完，怎么办？那只好和同学A 同学B 一起去借鉴你的原作业。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;终于，你改正完了，此时你拥有了一份新的作业，原来那份就报废了（当然现在还不行，因为同学ABC 还在借鉴）。这时，同学D 也来了，想借鉴你的作业，这时你不能再让他借鉴你的旧作业了。你大方的指了指你的新作业。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;过了一会，同学ABC 都已经借鉴完你的旧作业了（虽然旧作业是有误的，但是你没责任提醒他们）。你发现已经没有同学借鉴你的旧作业了，你就可以把就作业销毁了。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;以上就是一个 RCU 的过程。从上面我们发现，都是以&lt;strong&gt;你&lt;/strong&gt;为中心，而不是你的作业。因此你可以拥有一份新的作业的同时暂时不销毁旧作业。你就像一个指针，指向一份作业。在拥有新作业的同时（malloc），而暂时不销毁旧作业（free）。这也就是为什么&lt;strong&gt;RCU 只保护被动态分配并且通过指针引用的数据结构&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;二rcu-5-core-apis&#34;&gt;二、RCU 5 core APIs&lt;/h2&gt;&#xA;&lt;p&gt;The core RCU API is quite small:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Updateer &lt;code&gt;rcu_assign_pointer&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  1 struct foo {&#xA;  2   int a;&#xA;  3   int b;&#xA;  4   int c;&#xA;  5 };&#xA;  6 struct foo *gp = NULL;&#xA;  7 &#xA;  8 /* . . . */&#xA;  9 &#xA; 10 p = kmalloc(sizeof(*p), GFP_KERNEL);&#xA; 11 p-&amp;gt;a = 1;&#xA; 12 p-&amp;gt;b = 2;&#xA; 13 p-&amp;gt;c = 3;&#xA; 14 gp = p;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;根据优化和内存屏障部分我们知道 11 12 13 14 行代码不一定按照我们想要的顺序执行，其很有可能先执行 14 行，再依次赋值。因此我们需要内存和优化屏障。Linux Kernel 已经封装了 &lt;code&gt;rcu_assign_pointer&lt;/code&gt; 帮我们实现上述过程。其能保证下面代码先赋值 abc 结束后，再对 gp 赋值。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux Kernel 内核同步之自旋锁</title>
      <link>https://blog.jaxwang28.top/p/linux-kernel-synchronization-spinlock/</link>
      <pubDate>Mon, 19 May 2025 22:37:06 +0800</pubDate>
      <guid>https://blog.jaxwang28.top/p/linux-kernel-synchronization-spinlock/</guid>
      <description>&lt;h1 id=&#34;linux-kernel-内核同步之自旋锁&#34;&gt;Linux Kernel 内核同步之自旋锁&lt;/h1&gt;&#xA;&lt;p&gt;加锁（locking）是一种广泛应用的同步技术。当要访问&lt;strong&gt;共享数据结构&lt;/strong&gt;或进入&lt;strong&gt;临界区&lt;/strong&gt;时，为自己获得一把“锁”，离开时再释放锁。在获得锁到释放锁之间的之短时间内是禁止其他 CPU 访问的。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;spin_lock(&amp;amp;lock);&#xA;...&#xA;spin_unlock(&amp;amp;lock);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;不同系统架构的自旋锁实现是不同的：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;不支持内核抢占的单处理器：自旋锁的实现是空的&lt;/li&gt;&#xA;&lt;li&gt;支持内核抢占的单处理器：自旋锁的实现仅仅是禁止或启用&lt;strong&gt;内核抢占&lt;/strong&gt;。参考下面例子：&#xA;&lt;ol&gt;&#xA;&lt;li&gt;线程 A 获得锁&lt;/li&gt;&#xA;&lt;li&gt;线程 B 抢占内核获得执行权&lt;/li&gt;&#xA;&lt;li&gt;线程 B 获取相同锁发现已被锁&lt;/li&gt;&#xA;&lt;li&gt;. 线程 B 的优先级高于线程 A，死锁&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;支持内核抢占的多处理器：需要完整实现自旋锁&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;code&gt;spin_lock&lt;/code&gt; 是不会禁用&lt;strong&gt;本地中断&lt;/strong&gt;的，但是提供了 &lt;code&gt;spin_lock_irq&lt;/code&gt; ，其不仅会禁用内核抢占并且会禁用本地中断。当需要上锁的共享资源会在中断处理中被访问，我们需要使用禁止本地中断的锁，原因如下：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;线程 A 获得锁&lt;/li&gt;&#xA;&lt;li&gt;触发中断，中断处理中要获得相同锁，死锁&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;code&gt;spin_lock_irq()&lt;/code&gt; 在任何情况下都是安全的，但是没有 &lt;code&gt;spin_lock()&lt;/code&gt; 快。[3]&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;代数&lt;/th&gt;&#xA;          &lt;th&gt;名称&lt;/th&gt;&#xA;          &lt;th&gt;内核版本&lt;/th&gt;&#xA;          &lt;th&gt;公平性&lt;/th&gt;&#xA;          &lt;th&gt;高效性&lt;/th&gt;&#xA;          &lt;th&gt;接口兼容性&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;第一代&lt;/td&gt;&#xA;          &lt;td&gt;原始自旋锁&lt;/td&gt;&#xA;          &lt;td&gt;1.0 - 2.6.24&lt;/td&gt;&#xA;          &lt;td&gt;不公平&lt;/td&gt;&#xA;          &lt;td&gt;不高效&lt;/td&gt;&#xA;          &lt;td&gt;兼容&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;第二代&lt;/td&gt;&#xA;          &lt;td&gt;ticket spinlock&lt;/td&gt;&#xA;          &lt;td&gt;2.6.25 - 4.1x&lt;/td&gt;&#xA;          &lt;td&gt;公平&lt;/td&gt;&#xA;          &lt;td&gt;不高效&lt;/td&gt;&#xA;          &lt;td&gt;兼容&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;第三代&lt;/td&gt;&#xA;          &lt;td&gt;MCS spinlock&lt;/td&gt;&#xA;          &lt;td&gt;3.15 - now&lt;/td&gt;&#xA;          &lt;td&gt;公平&lt;/td&gt;&#xA;          &lt;td&gt;高效&lt;/td&gt;&#xA;          &lt;td&gt;不兼容&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;第四代&lt;/td&gt;&#xA;          &lt;td&gt;queued spinlock&lt;/td&gt;&#xA;          &lt;td&gt;4.2 - now&lt;/td&gt;&#xA;          &lt;td&gt;公平&lt;/td&gt;&#xA;          &lt;td&gt;高效&lt;/td&gt;&#xA;          &lt;td&gt;兼容&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;自旋锁首次提出之后又经历了三次迭代，下面对其简述：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux Kernel 内核同步之优化和内存屏障</title>
      <link>https://blog.jaxwang28.top/p/linux-kernel-synchronization-optimization-memory-barriers/</link>
      <pubDate>Mon, 19 May 2025 20:37:06 +0800</pubDate>
      <guid>https://blog.jaxwang28.top/p/linux-kernel-synchronization-optimization-memory-barriers/</guid>
      <description>&lt;h1 id=&#34;linux-kernel-内核同步之优化和内存屏障&#34;&gt;Linux Kernel 内核同步之优化和内存屏障&lt;/h1&gt;&#xA;&lt;p&gt;Linux Kernel 是支持优化屏障和内存屏障的，其中优化屏障是针对&lt;strong&gt;编译器&lt;/strong&gt;而言的，内存屏障是针对&lt;strong&gt;处理器&lt;/strong&gt;而言的，因此内存屏障取决于处理器架构。本文以 &lt;code&gt;ARMv8&lt;/code&gt; 架构处理器从下向上讲解内存屏障，并简述优化屏障。&lt;/p&gt;&#xA;&lt;h2 id=&#34;一linux-kernel-优化屏障&#34;&gt;一、Linux Kernel 优化屏障&lt;/h2&gt;&#xA;&lt;p&gt;编译器在编译源代码时会考虑性能进行优化重新排序指令顺序，以下面代码为例：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;volatile int a = 0;&#xA;volatile int b = 0;&#xA;&#xA;void no_barrier() {&#xA;    a = 1;&#xA;    b = 2;&#xA;}&#xA;&#xA;void with_barrier() {&#xA;    a = 1;&#xA;    asm volatile(&amp;#34;&amp;#34; ::: &amp;#34;memory&amp;#34;);  // 编译器优化屏障&#xA;    b = 2;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;aarch64-none-linux-gnu-gcc -S test.c -O3  -o test.s&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;no_barrier:&#xA;.LFB0:&#xA;        .cfi_startproc&#xA;        adrp    x0, .LANCHOR0&#xA;        add     x1, x0, :lo12:.LANCHOR0&#xA;        mov     w3, 1&#xA;        mov     w2, 2&#xA;        str     w3, [x0, #:lo12:.LANCHOR0]&#xA;        str     w2, [x1, 4]&#xA;        ret&#xA;        .cfi_endproc&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;with_barrier:&#xA;.LFB1:&#xA;        .cfi_startproc&#xA;        adrp    x0, .LANCHOR0&#xA;        mov     w2, 1&#xA;        add     x1, x0, :lo12:.LANCHOR0&#xA;        str     w2, [x0, #:lo12:.LANCHOR0]&#xA;        mov     w0, 2&#xA;        str     w0, [x1, 4]&#xA;        ret&#xA;        .cfi_endproc&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们只需观察 &lt;code&gt;mov&lt;/code&gt; &lt;code&gt;str&lt;/code&gt; 指令的顺序：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux Kernel 内核同步之原子操作</title>
      <link>https://blog.jaxwang28.top/p/linux-kernel-synchronization-atomic-operations/</link>
      <pubDate>Sun, 18 May 2025 21:37:06 +0800</pubDate>
      <guid>https://blog.jaxwang28.top/p/linux-kernel-synchronization-atomic-operations/</guid>
      <description>&lt;h1 id=&#34;linux-kernel-内核同步之原子操作&#34;&gt;Linux Kernel 内核同步之原子操作&lt;/h1&gt;&#xA;&lt;p&gt;原子操作是指指令以原子的方式执行，执行过程不会被打断。要保证操作的原子性和完整性，需要“原子地”（不间断地）完整&lt;strong&gt;读-修改-回写&lt;/strong&gt;机制。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;static int i = 0;&#xA;void thread_A _func()&#xA;{&#xA;&#x9;i++;&#xA;}&#xA;void thread_B _func()&#xA;{&#xA;&#x9;i++;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码的理想执行结果是&lt;code&gt;i&lt;/code&gt; 为 2，但事实并非如此， i 有一定的概率为 1。对于 &lt;code&gt;thread_A&lt;/code&gt; 和 &lt;code&gt;thread_B&lt;/code&gt; 进行的操作可以简单理解为：&lt;strong&gt;读 - 修改 - 回写&lt;/strong&gt;。从单处理器和多处理器角度分析：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;单处理器：&lt;code&gt;thread_A&lt;/code&gt; 与 &lt;code&gt;thread_B&lt;/code&gt; 存在并发，当 &lt;code&gt;thread_A&lt;/code&gt; 执行完 &lt;code&gt;读&lt;/code&gt; 操作，CPU 有可能切换为 &lt;code&gt;thread_B&lt;/code&gt; 执行 &lt;code&gt;读&lt;/code&gt; 操作，这样最终的结果为 1.&lt;/li&gt;&#xA;&lt;li&gt;多处理器：&lt;code&gt;thread_A&lt;/code&gt; 与 &lt;code&gt;thread_B&lt;/code&gt; 存在并发，&lt;code&gt;thread_A&lt;/code&gt; 与 &lt;code&gt;thread_B&lt;/code&gt; 可能同时执行 &lt;code&gt;读&lt;/code&gt; 操作，这样最终结果也为 1.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;因此，要想保证结果的正确性，我们必须保证上面的操作完整地原子地（不间断地）完成&lt;strong&gt;读-修改-回写&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;原子操作是以硬件为基础，即 &lt;strong&gt;CPU 必须提供原子操作的汇编指令&lt;/strong&gt;。本文以 ARMv8 架构为例从下至上分析原子操作。&lt;/p&gt;&#xA;&lt;h2 id=&#34;一arm64-原子操作&#34;&gt;一、ARM64 原子操作&lt;/h2&gt;&#xA;&lt;p&gt;原子操作需要处理器提供硬件支持，ARMv8 提供两种方式实现了原子操作：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;独占内存访问指令：独占加载（Load-Exclusive）和独占存储（Store-Exclusive）指令，其实现方式叫做连接加载/条件存储（Load-Link/Store-Conditional, LL/SC）&lt;/li&gt;&#xA;&lt;li&gt;原子内存访问指令：ARMv8.1 体系实现的 LSE 指令&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;em&gt;本文不对这两种方式详细展开，感兴趣的可以阅读 References[2] 书籍。&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>I2C 通信协议</title>
      <link>https://blog.jaxwang28.top/p/i2c-protocol/</link>
      <pubDate>Fri, 16 May 2025 14:12:00 +0800</pubDate>
      <guid>https://blog.jaxwang28.top/p/i2c-protocol/</guid>
      <description>&lt;h1 id=&#34;i2c-通信协议&#34;&gt;I2C 通信协议&lt;/h1&gt;&#xA;&lt;p&gt;I2C 是一种半双工&lt;strong&gt;系统内部协议&lt;/strong&gt;，即在系统内多个集成电路(IC)间的通讯。其支持 3 种传输模式，本文不对 3 种传输模式展开，仅分析基本原理。&lt;/p&gt;&#xA;&lt;h2 id=&#34;一物理层&#34;&gt;一、物理层&lt;/h2&gt;&#xA;&lt;p&gt;I2C 通信设备之间的常用连接方式如下：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img.jaxwang28.top/2025/05/1746f76b8a598ac9083caf25e73ea9cc.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一条 I2C 总线包含两条线路：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;SDA：双向串行数据线，用来传输数据&lt;/li&gt;&#xA;&lt;li&gt;SCL：串行时钟线，用来同步时钟&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;一条 I2C 通信总线可以连接多个 I2C 通信设备，包含多个主机或从机&lt;/li&gt;&#xA;&lt;li&gt;每个总线上的设备都有一个独立的地址，主机利用这个地址访问不同的从机设备&lt;/li&gt;&#xA;&lt;li&gt;总线通过上拉电阻接到电源。当I2C设备空闲时，会输出高阻态， 而当所有设备都空闲，都输出高阻态时，由上拉电阻把总线拉成高电平&lt;/li&gt;&#xA;&lt;li&gt;多个主机同时使用总线时，为了防止数据冲突， 会利用仲裁方式决定由哪个设备占用总线&lt;/li&gt;&#xA;&lt;li&gt;连接到相同总线的 IC 数量受到总线的最大电容 400pF 限制&lt;/li&gt;&#xA;&lt;li&gt;I2C 总线具有 3 种传输模式：&#xA;&lt;ol&gt;&#xA;&lt;li&gt;标准模式：100kbps&lt;/li&gt;&#xA;&lt;li&gt;快速模式：400kbps&lt;/li&gt;&#xA;&lt;li&gt;高速模式：3.4Mbps，目前大多数 I2C 设备尚不支持&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;关于 I2C 为什么使用上拉电阻，有下面 3 个原因（数电知识）：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;SDA和SCL线均为漏极开路驱动器&lt;/li&gt;&#xA;&lt;li&gt;它可以将输出驱动为低电平，将其驱动为高电平&lt;/li&gt;&#xA;&lt;li&gt;为了使线路能够变高，您必须提供上拉电阻&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;不同于 RS-232 为异步通信需要设置波特率，I2C 拥有一条时钟线，为同步传输，其数据有效性如下：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;SCL为高电平的时候SDA表示的数据有效：SDA 为高电平时表示逻辑1， 为低电平时表示逻辑0&lt;/li&gt;&#xA;&lt;li&gt;SCL为低电平的时候SDA表示的数据无效：SDA 一般在这个时候进行电平切换&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img.jaxwang28.top/2025/05/b023386cd13cf1971813db9ee2b7c1f4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;二协议层&#34;&gt;二、协议层&lt;/h2&gt;&#xA;&lt;p&gt;I2C 的通信过程是&lt;strong&gt;由主机发起的，支持主机写数据到从机和主机在从机中读数据&lt;/strong&gt;，其过程如下图：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img.jaxwang28.top/2025/05/2b0cafa288aa0740a608ca59a5ae7cb3.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img.jaxwang28.top/2025/05/00b6f43c6d80736921627bb7b5741d56.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;起始信号 S 当 SCL 线是高电平时 SDA 线从高电平向低电平切换，这个情况表示通讯的起始。起始和停止信号一般由主机产生。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img.jaxwang28.top/2025/05/35e8b3ffbcc8f9e9f2f561d07c69755d.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>RS-232 串口通信协议</title>
      <link>https://blog.jaxwang28.top/p/rs232-protocol/</link>
      <pubDate>Fri, 16 May 2025 12:12:00 +0800</pubDate>
      <guid>https://blog.jaxwang28.top/p/rs232-protocol/</guid>
      <description>&lt;h1 id=&#34;rs-232-串口通信协议&#34;&gt;RS-232 串口通信协议&lt;/h1&gt;&#xA;&lt;p&gt;串口通信（Serial Communication）是一种常用的全双工&lt;strong&gt;系统间通信方式&lt;/strong&gt;。其使用 RS-232 标准。本文将从物理层和协议层讲解 RS-232 标准。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img.jaxwang28.top/2025/05/8f404cbc844bb57a6d272703ad138a10.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;一物理层&#34;&gt;一、物理层&lt;/h2&gt;&#xA;&lt;p&gt;RS-232 标准使用 9 根信号线，其接口被称为 COM 口（DB9 口）。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img.jaxwang28.top/2025/05/a8aa058ba5200ee1e3184705e041e59a.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img.jaxwang28.top/2025/05/010bcb3789abb61752b58e1c34a42168.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在目前的其它工业控制使用的串口通讯中，&lt;strong&gt;一般只使用RXD、TXD以及GND三条信号线&lt;/strong&gt;， 直接传输数据信号，而RTS、CTS、DSR、DTR及DCD信号都被裁剪掉了。&lt;/p&gt;&#xA;&lt;p&gt;常见的电子电路中常使用 TTL 的电平标准，使用 5V 表示逻辑1，使用 0V 表示逻辑0。但是为了提升远距离传输和抗干扰能力，RS-232 标准使用 -15V 表示逻辑1，+15V 表示逻辑0。因为控制器一般使用TTL电平标准，所以常常会使用MAX3232芯片对TTL及RS-232电平的信号进行互相转换。&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;电平标准&lt;/th&gt;&#xA;          &lt;th&gt;描述&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;5V TTL&lt;/td&gt;&#xA;          &lt;td&gt;逻辑1: 2.4 ~ 5V&lt;br&gt;逻辑0: 0 ~ 0.5V&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;RS-232&lt;/td&gt;&#xA;          &lt;td&gt;逻辑1: -15 ~ -3V&lt;br&gt;逻辑0: +3 ~ +15V&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;center&gt;&lt;img src=&#34;https://img.jaxwang28.top/2025/05/5b401a051ccc7b9af23048dc20e26626.png&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt; &lt;/center&gt;&#xA;&lt;h2 id=&#34;二协议层&#34;&gt;二、协议层&lt;/h2&gt;&#xA;&lt;p&gt;RS-232 标准的数据包由发送端的 TXD 接口发送到接收端的 RXD 接口。其数据包由&lt;strong&gt;起始位、数据位、校验位和停止位&lt;/strong&gt;组成。通信双方必须对数据包的格式约定一致才可正确通信。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img.jaxwang28.top/2025/05/865e7a5f6476c480303a824543d8ad10.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;空闲：空闲时一直处于高电位即逻辑1&lt;/li&gt;&#xA;&lt;li&gt;起始位：数据包的起始信号由一个逻辑0的数据位表示&lt;/li&gt;&#xA;&lt;li&gt;有效数据：有效数据的长度常被约定为5、6、7或8位长&lt;/li&gt;&#xA;&lt;li&gt;数据检验：检验方法有奇校验(odd)、偶校验(even)、0校验(space)、1校验(mark)以及无校验(noparity)&lt;/li&gt;&#xA;&lt;li&gt;停止位：数据包的停止信号可由0.5、1、1.5或2个逻辑1的数据位表示，只要双方约定一致即可&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;center&gt;&lt;img src=&#34;https://img.jaxwang28.top/2025/05/3f09d2ad784bdaa1d3ad0034f6636a0d.png&#34;  alt=&#34;串口软件配置界面&#34; width=&#34;70%&#34; height=&#34;70%&#34;&gt; &lt;/center&gt;&#xA;&lt;p&gt;由于 RS-232 是串口异步通讯，即通信过程中没有时钟信号（DB9接口中是没有时钟信号的），所以两个通讯设备之间需要约定好波特率，即每个码元的长度，以便对信号进行解码。常见的波特率为4800、9600、115200等。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ref&#34;&gt;Ref&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://doc.embedfire.com/mcu/stm32/f103badao/std/zh/latest/book/USART.html&#34;&gt;https://doc.embedfire.com/mcu/stm32/f103badao/std/zh/latest/book/USART.html&lt;/a&gt; 野火STM32&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux Kernel 数据结构分析之链表</title>
      <link>https://blog.jaxwang28.top/p/linux-data-structure-list/</link>
      <pubDate>Wed, 30 Apr 2025 15:07:00 +0800</pubDate>
      <guid>https://blog.jaxwang28.top/p/linux-data-structure-list/</guid>
      <description>&lt;h1 id=&#34;linux-kernel-数据结构分析之链表&#34;&gt;Linux Kernel 数据结构分析之链表&lt;/h1&gt;&#xA;&lt;p&gt;Linux Kernel 中实现了以下两种链表：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;双向循环链表&lt;/li&gt;&#xA;&lt;li&gt;hash 链表&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;本文将分别分析两种链表的实现。&lt;/p&gt;&#xA;&lt;h2 id=&#34;一双向循环链表&#34;&gt;一、双向循环链表&lt;/h2&gt;&#xA;&lt;p&gt;Linux 使用了最简洁的方式实现了一个几乎是万能的链表，其通过将 &lt;code&gt;struct list_head&lt;/code&gt; &lt;strong&gt;嵌入到其他结构体中&lt;/strong&gt;，实现双向循环链表。并在 &lt;code&gt;include/linux/list.h&lt;/code&gt; 定义了支持的所有操作。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// include/linux/types.h&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; list_head {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; list_head &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;next, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;prev;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以 &lt;code&gt;keme_caches&lt;/code&gt; 链表进行分析。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// mm/slab_common.c&#xA;&#xA;LIST_HEAD(slab_caches);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// mm/slab.h&#xA;&#xA;struct kmem_cache {&#xA;    ....&#xA;    struct list_head list;&#x9;&#x9;/* List of slab caches */&#xA;    ....&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;center&gt;&lt;img src=&#34;https://img.jaxwang28.top/2025/04/c8590fa84ab49e876bb5296f2dc13712.png&#34; width=&#34;70%&#34; height=&#34;70%&#34;&gt; &lt;/center&gt;&#xA;&lt;p&gt;上面的例子中，指针指向是 &lt;code&gt;struct kmem_cache&lt;/code&gt; 中 &lt;code&gt;list&lt;/code&gt; 成员。通过这个成员的地址获得 &lt;code&gt;struct kmem_cache&lt;/code&gt; 的地址的操作，在 Linux 中通过 &lt;code&gt;list_entry&lt;/code&gt; 实现。下面分析其实现逻辑。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// include/linux/list.h&#xA;&#xA;/**&#xA; * list_entry - get the struct for this entry&#xA; * @ptr:&#x9;the &amp;amp;struct list_head pointer.&#xA; * @type:&#x9;the type of the struct this is embedded in.&#xA; * @member:&#x9;the name of the list_head within the struct.&#xA; */&#xA;#define list_entry(ptr, type, member) \&#xA;&#x9;container_of(ptr, type, member)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// include/linux/container_of.h&#xA;&#xA;/**&#xA; * container_of - cast a member of a structure out to the containing structure&#xA; * @ptr:&#x9;the pointer to the member.&#xA; * @type:&#x9;the type of the container struct this is embedded in.&#xA; * @member:&#x9;the name of the member within the struct.&#xA; *&#xA; * WARNING: any const qualifier of @ptr is lost.&#xA; */&#xA;#define container_of(ptr, type, member) ({&#x9;&#x9;&#x9;&#x9;\&#xA;&#x9;void *__mptr = (void *)(ptr);&#x9;&#x9;&#x9;&#x9;&#x9;\&#xA;&#x9;static_assert(__same_type(*(ptr), ((type *)0)-&amp;gt;member) ||&#x9;\&#xA;&#x9;&#x9;      __same_type(*(ptr), void),&#x9;&#x9;&#x9;\&#xA;&#x9;&#x9;      &amp;#34;pointer type mismatch in container_of()&amp;#34;);&#x9;\&#xA;&#x9;((type *)(__mptr - offsetof(type, member))); })&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// tools/include/linux/kernel.h&#xA;&#xA;#ifndef offsetof&#xA;#define offsetof(TYPE, MEMBER) ((size_t) &amp;amp;((TYPE *)0)-&amp;gt;MEMBER)&#xA;#endif&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;offsetof&lt;/code&gt; 计算结构体中某个成员的偏移量，其通过强转假设地址 0 处有一个 TYPE 类型的结构体，&lt;code&gt;-&amp;gt;&lt;/code&gt;指针取结构体成员 Member，最后通过 &lt;code&gt;&amp;amp;&lt;/code&gt; 获得 Member 的地址，并强转为 &lt;code&gt;size_t&lt;/code&gt; 类型。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;container_of&lt;/code&gt; 利用成员指针，获得结构体的指针。&lt;strong&gt;成员指针 - 成员的偏移量=结构体指针&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;list_entry&lt;/code&gt; list_head 作为一个成员嵌入到结构体中，已知 list_head 指针，调用 &lt;code&gt;container_of&lt;/code&gt; 获得结构体指针。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;二hash-链表&#34;&gt;二、hash 链表&lt;/h2&gt;&#xA;&lt;p&gt;linux kernel 中定义 &lt;code&gt;hlist_head&lt;/code&gt; 用作 hash 表中的链表头，&lt;code&gt;hlist_node&lt;/code&gt; 用作链表中的某一项。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux Kernel 内存管理之物理内存模型</title>
      <link>https://blog.jaxwang28.top/p/linux-kernel-memory-physical-memory-model/</link>
      <pubDate>Tue, 29 Apr 2025 16:30:00 +0800</pubDate>
      <guid>https://blog.jaxwang28.top/p/linux-kernel-memory-physical-memory-model/</guid>
      <description>&lt;h1 id=&#34;linux-kernel-内存管理之物理内存模型&#34;&gt;Linux Kernel 内存管理之物理内存模型&lt;/h1&gt;&#xA;&lt;p&gt;4GB RAM 4KB 页面大小的 Linux 系统会产生一百万之多的 &lt;code&gt;struct page&lt;/code&gt;，组织管理这些结构体的方式我们称为内存模型。Linux 目前支持两种模型：&lt;code&gt;FLATMEM&lt;/code&gt; &lt;code&gt;SPARSEMEM&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;p&gt;无论选择哪个内存模型，都会通过&lt;strong&gt;一个或多个数组&lt;/strong&gt;管理 &lt;code&gt;struct page&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;一内存空洞-memory-hole&#34;&gt;一、内存空洞 memory hole&lt;/h2&gt;&#xA;&lt;p&gt;事实上 RAM 只是物理地址空间的一部分，物理地址空间通常会出现一部分地址是不用做普通内存使用的，对于这地址我们称之为&lt;strong&gt;内存空洞 Memory Hole&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;使用 &lt;code&gt;qemu-system-x86_64 -m 8G &lt;/code&gt; 启动 Kernel，可以看到下面 log&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[    0.000000] BIOS-provided physical RAM map:&#xA;[    0.000000] BIOS-e820: [mem 0x0000000000000000-0x000000000009fbff] usable&#xA;[    0.000000] BIOS-e820: [mem 0x000000000009fc00-0x000000000009ffff] reserved&#xA;[    0.000000] BIOS-e820: [mem 0x00000000000f0000-0x00000000000fffff] reserved&#xA;[    0.000000] BIOS-e820: [mem 0x0000000000100000-0x00000000bffdffff] usable&#xA;[    0.000000] BIOS-e820: [mem 0x00000000bffe0000-0x00000000bfffffff] reserved&#xA;[    0.000000] BIOS-e820: [mem 0x00000000fffc0000-0x00000000ffffffff] reserved&#xA;[    0.000000] BIOS-e820: [mem 0x0000000100000000-0x000000023fffffff] usable&#xA;[    0.000000] BIOS-e820: [mem 0x000000fd00000000-0x000000ffffffffff] reserved&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对于其中 &lt;code&gt;reserved&lt;/code&gt; 的部分是不可作为普通内存使用的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Valgrind 基础介绍与框架概览</title>
      <link>https://blog.jaxwang28.top/p/valgrind-intro-framework-overview/</link>
      <pubDate>Sat, 19 Apr 2025 21:45:06 +0800</pubDate>
      <guid>https://blog.jaxwang28.top/p/valgrind-intro-framework-overview/</guid>
      <description>&lt;h1 id=&#34;valgrind-基础介绍与框架概览&#34;&gt;Valgrind 基础介绍与框架概览&lt;/h1&gt;&#xA;&lt;p&gt;Valgrind是一款用于内存调试、内存泄漏检测以及性能分析的软件开发工具，本文简单分析 Valgrind 基本原理及其框架组成，并记录其在嵌入式设备上的移植与调试过程。&lt;/p&gt;&#xA;&lt;center&gt;&#xA;&lt;img src=&#34;https://img.jaxwang28.top/2025/05/58dd96be77f8cf9442f0177a402fc258.png&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&#xA;&lt;/center&gt;&#xA;&lt;h2 id=&#34;一插桩技术概述&#34;&gt;一、插桩技术概述&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Instrumentation_(computer_programming)&#34;&gt;插桩&lt;/a&gt;（instrumentation）技术是指&lt;strong&gt;在程序源码或二进制代码中插入监测代码&lt;/strong&gt;实现对程序的监视。达到记录函数进入和退出、监控内存读写、统计执行时间、跟踪异常等。&lt;/p&gt;&#xA;&lt;p&gt;插桩在实现上可分为两类：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;静态插桩 Static Instrumentation：在程序编译之前或编译期间插入代码，即在&lt;strong&gt;源代码或中间代码&lt;/strong&gt;中插入检测代码，最终编译成带有插桩的可执行文件。&lt;/li&gt;&#xA;&lt;li&gt;动态插桩 Dynamic Binary Instrumentation DBI：在程序运行中进行插桩，其操作对象为&lt;strong&gt;机器码&lt;/strong&gt;。动态二进制插桩工具主要包含 Pin，Valgrind，DynamoRIO 等。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;二valgrind-framework&#34;&gt;二、Valgrind Framework&lt;/h2&gt;&#xA;&lt;p&gt;Valgrind 本质上是一套核心框架 framework，其提供了核心 Core 及 APIs ，在此框架基础上开发出 7 个工具：&lt;/p&gt;&#xA;&lt;center&gt;&#xA;&lt;img src=&#34;https://img.jaxwang28.top/2025/05/ca0ba156ff8f0203ba14b1e713ea4318.png&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&#xA;&lt;/center&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;工具&lt;/th&gt;&#xA;          &lt;th&gt;描述&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Memcheck&lt;/td&gt;&#xA;          &lt;td&gt;内存错误检测，用于检测内存泄漏、越界访问、使用未初始化内存等内存相关错误&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Helgrind&lt;/td&gt;&#xA;          &lt;td&gt;线程错误检测，检测数据竞争（race conditions）和死锁&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;DRD&lt;/td&gt;&#xA;          &lt;td&gt;线程错误检测，使用与 Helgrind 不同技术&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Cachegrind&lt;/td&gt;&#xA;          &lt;td&gt;缓存和分支预测分析&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Callgrind&lt;/td&gt;&#xA;          &lt;td&gt;基于 Cachegrind，但额外生成调用图，分析函数调用及其性能影响&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Massif&lt;/td&gt;&#xA;          &lt;td&gt;堆内存使用分析工具，帮助找出内存使用高峰及其来源&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;DHAT&lt;/td&gt;&#xA;          &lt;td&gt;分析堆内存分配和释放的详细情况&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;三嵌入式平台调试-memory-leak&#34;&gt;三、嵌入式平台调试 memory leak&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;指定 &lt;code&gt;toolchains&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;export GCC_PATH=/your_path_for_linaro/bin&#xA;export CC=${GCC_PATH}/aarch64-linux-gnu-gcc&#xA;export LD=${GCC_PATH}/aarch64-linux-gnu-ld&#xA;export AR=${GCC_PATH}/aarch64-linux-gnu-ar&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;编译配置&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd valgrind&#xA;./autogen.sh&#xA;./configure --prefix=`pwd`/Inst --host=aarch64-unknown-linux --enable-only64bit&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;3&#34;&gt;&#xA;&lt;li&gt;编译安装&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;make -j4 install&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;4&#34;&gt;&#xA;&lt;li&gt;准备带有 debug info 的 &lt;code&gt;ld.so&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;code&gt;valgrind memcheck&lt;/code&gt; 需要使用带调试信息的 &lt;code&gt;ld.so&lt;/code&gt;， 其会拦截并替换 ld.so 中的某些符号（比如 strlen）以实现正确的检测[1]。 否则会报 &lt;code&gt;cannot be set up&lt;/code&gt; 错误，&lt;code&gt;ld.so&lt;/code&gt; 可以在交叉编译工具链中找到。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
