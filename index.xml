<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on Jackson Blog</title>
    <link>https://blog.jaxwang.top/</link>
    <description>Recent content in Home on Jackson Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 Jul 2024 20:47:05 +0800</lastBuildDate>
    <atom:link href="https://blog.jaxwang.top/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OpenWRT ubus 框架</title>
      <link>https://blog.jaxwang.top/p/openwrt_ubus/</link>
      <pubDate>Sun, 28 Jul 2024 20:47:05 +0800</pubDate>
      <guid>https://blog.jaxwang.top/p/openwrt_ubus/</guid>
      <description>https://openwrt.org/docs/techref/ubus&#xA;https://hackmd.io/@rYMqzC-9Rxy0Isn3zClURg/H1BY98bRw&#xA;一直在使用 ubus，系统性学习一下，并准备用 rust 重构一把。&#xA;ubus 概述 ubus 是一个 OpenWRT 中的 RPC 工具，其主要目的就是提供系统级进程间通信。&#xA;其核心是 ubusd daemon，提供接口给任何其他 daemon 程序进行注册或发送信息。该接口使用 unix socket 实现，并使用 TLV 格式消息。&#xA;ubus 提供了 3 种工具：&#xA;libubus command-line tool ubus ubus lua module ubus 通信模型 先看一下我们常见的 client-server 模型。&#xA;假设有 n 个程序，那么进程间通信的总 IPC 连接数将达到 n 的累加，这是非常惊人的数量。&#xA;使用 ubus IPC 模型。&#xA;ubus daemon：作为代理人，负责转发注册。&#xA;ubus server object：一些软件或守护进程提供接口，供其他软件调用。Server object 以及其注册的方法可以被 client 调用。&#xA;ubus client object：调用者。&#xA;ubus 工作模式 Invoke 一对一的通信模式。 Subscribe/notify 一对多的通信模式，以 object 进行分组。</description>
    </item>
    <item>
      <title>OpenWRT 构建 Rust Package</title>
      <link>https://blog.jaxwang.top/p/openwrt_rust_package_build/</link>
      <pubDate>Sun, 28 Jul 2024 11:29:49 +0800</pubDate>
      <guid>https://blog.jaxwang.top/p/openwrt_rust_package_build/</guid>
      <description>OpenWRT 构建系统搭建 源码下载 git clone https://github.com/openwrt/openwrt.git 版本更改 OpenWRT 从 23.05.0 提供了 Rust Package Support git checkout v23.05.4 # clean make distclean package 安装 ./scripts/feeds update -a ./scripts/feeds install -a ls ls feeds/packages/lang/rust/ 构建交叉编译环境配置文件 make menuconfig 勾选 Languages-&amp;gt;rust 编译交叉工具链 make toolchain/install 调整 PATH 环境变量 目标无关工具和工具链被部署到 staging_dir/host/ 和 staging_dir/toolchain/ 目录。staging_dir/host/bin 可以找到相关的可执行文件。我们将其添加到 PATH 环境变量中方便我们直接使用。 export PATH=/home/buildbot/source/staging_dir/host/bin:$PATH 源码准备 在 openwrt 的源码目录下执行 cargo new helloworld-rs 创建 package 在 openwrt source code 下创建一个 feed 仓库，并创建一个 examples 类别。 mkdir -p mypackages/examples 向该仓库中添加个一 helloworld-rs package cd mypackages/examples mkdir helloworld-rs touch Makefile 每一个 package 都需要一个 Package Manifest 来描述这个 package，如从何处下载源码，如何构建源码。使用下面 Makefile 来实现，其中 SOURCE_DIR 就表明了获取源码的途径。</description>
    </item>
    <item>
      <title>OpenWRT 构建个人 Package</title>
      <link>https://blog.jaxwang.top/p/openwrt_new_package_build/</link>
      <pubDate>Sat, 27 Jul 2024 18:30:52 +0800</pubDate>
      <guid>https://blog.jaxwang.top/p/openwrt_new_package_build/</guid>
      <description>最权威官方指导： https://openwrt.org/docs/guide-developer/helloworld/start&#xA;OpenWRT 编译系统准备 源码下载 git clone https://github.com/openwrt/openwrt.git 版本更改 git checkout v23.05.4 make distclean 安装更新 feeds 避免后面出现问题 ./scripts/feeds update -a ./scripts/feeds install -a 配置交叉编译环境 make menuconfig 编译交叉工具链 make toolchain/install 调整 PATH 环境变量 目标无关工具和工具链被部署到 staging_dir/host/ 和 staging_dir/toolchain/ 目录。staging_dir/host/bin 可以找到相关的可执行文件。我们将其添加到 PATH 环境变量中方便我们直接使用。 export PATH=/home/buildbot/source/staging_dir/host/bin:$PATH 源码准备 在 openwrt 的源码目录创建一个 helloworld 目录，并创建 helloworld.c 文件。 mkdir helloworld touch helloworld.c helloworld.c 如下 #include &amp;lt;stdio.h&amp;gt; int main(void) { printf(&amp;quot;\nHello, world!\n\n&amp;quot;); return 0; } 创建 package OpenWRT 高度依赖 package 的概念，几乎所有软件都是从 package 而来，包括交叉编译工具甚至是 kernel。</description>
    </item>
    <item>
      <title>无线通信理论基础（四）</title>
      <link>https://blog.jaxwang.top/p/wifi-wireless-communication-fundamental-4/</link>
      <pubDate>Sun, 30 Jun 2024 21:32:20 +0800</pubDate>
      <guid>https://blog.jaxwang.top/p/wifi-wireless-communication-fundamental-4/</guid>
      <description>各种传输技术和频率范围。&#xA;窄带与扩频 射频传输的方式主要分为窄带 narrowband 和扩频 spread spectrum。&#xA;窄带：使用极窄的带宽发送携带数据。&#xA;扩频：使用超出实际所需的带宽发送数据。&#xA;扩频技术主要有两种：FH 和 DS&#xA;多径干扰&#xA;主信号与反射信号之间的延迟称为时延扩展 delay spread，如果时延扩展过大，反射信号可能干扰主信号的同一数据流，这种情况称为符号间干扰 ISI。&#xA;扩频系统不易受到多径的干扰，因为扩频将信号扩展到更大的频率范围，不同频率在多径内产生的延迟不同，某些波长可能受干扰，其他波长不受干扰，因此优于窄带。&#xA;在 802.11n/ac 出现之前多径一直是影响无线局域网的性能和吞吐量的因素。&#xA;DSSS 直接序列扩频 802.11 和 802.11b&#xA;FHSS 跳频扩频 IEEE 802.11-2016 已经弃用 FHSS，不再赘述。蓝牙使用 FHSS。&#xA;OFDM 正交频分复用 OFDM 并非扩频技术，但具有与扩频技术类似的特性的特性，如使用超出实际所需的带宽传输数据，因此往往被列为扩频技术，这种划分并不正确。&#xA;IEEE802.11-206 规定 5G 频段使用 OFDM，2.4G 频段使用 ERP-OFDM，这两种技术在本质上并无区别。802.11a 和 802.11g 分别采用 OFDM 和 ERP-OFDM技术。&#xA;20 MHz OFDM 信道由 64 个独立、紧密且精确间隔的频率构成，这些频率被称为副载波 subcarrier。&#xA;副载波带宽：20 MHz / 64 = 312.5 kHz&#xA;副载波间关系：副载波之间必须正交，不能相互影响。&#xA;OFDM 符号时长：1 / 321.5 kHz = 3.</description>
    </item>
    <item>
      <title>无线通信理论基础（三）</title>
      <link>https://blog.jaxwang.top/p/wifi-wireless-communication-fundamental-3/</link>
      <pubDate>Sat, 29 Jun 2024 21:32:20 +0800</pubDate>
      <guid>https://blog.jaxwang.top/p/wifi-wireless-communication-fundamental-3/</guid>
      <description>天线类型 天线不仅可以作为辐射器聚焦发射信号能量，还可以聚焦接收信号能量。&#xA;全向天线 omnidirectional antenna&#xA;半定向天线 semidirectional antenna&#xA;强方向性天线 highly directional antenna&#xA;天线分集 室内无线网络容易产生多径信号，为了补偿多径带来的影响，接入点等无线网络设备普遍采用天线分集 antenna diversity，又称为 spatial diversity，接入点使用两副或多副天线，并与接收机共同工作，以最大限度减少多径的不利影响。&#xA;接入点侦听到射频信号时，比较两副天线收到的信号，选择信号强的那副天线来接收数据帧。&#xA;802.11n 之前的接口大多采用交换分集 switched diversity ，选择振幅最大的信号，忽略其他信号。&#xA;多输入输出 多输入多输出 MIMO 是一种更为复杂的天线分集技术。&#xA;多径会影响信号质量，因此传统的天线系统致力于消除多径带来的不利影响；而 MIMO 恰恰相反，它利用多径来改善信号质量，MIMO 使用多副天线同时收发数据，发射机能同时使用多个射频信号发射数据，接收机再将这些数据从信号中恢复。&#xA;802.11n/ac 无线接口使用 MIMO。</description>
    </item>
    <item>
      <title>无线通信理论基础（二）</title>
      <link>https://blog.jaxwang.top/p/wifi-wireless-communication-fundamental-2/</link>
      <pubDate>Thu, 20 Jun 2024 21:48:59 +0800</pubDate>
      <guid>https://blog.jaxwang.top/p/wifi-wireless-communication-fundamental-2/</guid>
      <description>射频组件 Transmitter&#xA;发射机，用来产生特定频率的信号。&#xA;Antenna&#xA;在通信系统中，与发射机相连的天线用来辐射信号，与接收机相连的天线用来捕捉信号。&#xA;可以通过两种方式增加天线的功率输出，一种是增加发射机的功率，另一种是引导或聚焦天线辐射出去的射频信号。&#xA;Receiver&#xA;接收机，用来接收信号。&#xA;发射机和接收机通常是一个设备，称为收发器 transceiver&#xA;功率单位与比较单位 功率单位无需多言，就是描述功率的；比较单位是用来描述变化的，生活中最常见的比较单位（折扣），即 1 折，表示是原来的十分之一。&#xA;常见的功率单位：&#xA;瓦特(W) 毫瓦(mW) 毫瓦分贝(dBm) 常见的比价单位：&#xA;分贝(dB) 各向同性分贝(dBi) 偶极子分贝(dBd) 分贝 一个比较单位，来自贝尔实验室，他们功率之比为 10:1 的声音信号称为 1 贝尔 Bell。100:1 为 2 贝尔，依次类推。&#xA;10 lg10=1 100 lg100=2 假设两功率 P1 与 P2&#xA;1 B = 10 dB P1 与 P2 的变化值为: lg(P1/P2) B = 10 lg(P1/P2) dB 假设一个信号衰减 20 dB，计算其衰减倍数:&#xA;10 lg(P1/P2) = 20 P1/P2 = 100 毫瓦分贝 毫瓦分贝指的是相对 1 mW 的分贝。</description>
    </item>
    <item>
      <title>无线通信理论基础（一）</title>
      <link>https://blog.jaxwang.top/p/wifi-wireless-communication-fundamental-1/</link>
      <pubDate>Wed, 19 Jun 2024 23:29:42 +0800</pubDate>
      <guid>https://blog.jaxwang.top/p/wifi-wireless-communication-fundamental-1/</guid>
      <description>学习 WiFi 需要一些基础无线通信理论。&#xA;射频信号 发射机产生的交流电信号为射频信号。&#xA;射频信号的特性 波长频率振幅这里就不过多讲述了。&#xA;相位并不是单一射频信号的特性，其是一个相对概念，描述的是两个信号之间的关系。这和我们的月相是类似的。相位对理解多径 multipath 至关重要。&#xA;射频信号的行为 射频信号在空气中传播千变万化，射频的传播行为有以下几种关键的行为：吸收、反射、散射、折射、衍射、衰减、自由空间路径损耗、多径、增益。下面重点讲几种&#xA;衰减 信号在空间中传输，受吸收、距离和多径的影响而衰减。&#xA;自由空间路径损耗 即使没有障碍吸收和多径的影响，电磁信号在传输中也会受物理定律而衰弱。射频信号在离开天线之后，能量会扩散到更大的区域，导致信号强度减弱。&#xA;这里讲一下 6dB 规则，即距离每增加 1 倍，振幅将减少 6dB。如图中 2000 到 4000，增加 1 倍之后，振幅减少 6dB。&#xA;`&#xA;多径 由于信号会发生反射、散射、折射或衍射，导致同一信号沿多条路径传输，同时或相隔极短的时间到达接收天线。&#xA;由于反射信号路径更长，因此一般晚于主信号到达天线，多条路径之间的时间差称为时延扩展 delay spread。&#xA;多径造成遗留的 802.11a/b/g 无线网络性能下降，因为多径会降低接收信号的强度和质量。&#xA;但是，802.11n/ac 无线接口采用 MIMO 天线分集与 MRC 信号处理技术，使多径转变为提升网络性能的有利条件。&#xA;https://wirelesspi.com/carrier-phase-based-ranging-in-indoor-multipath-channels/&#xA;增益 增益又称为放大，描述振幅或信号强度的增加。&#xA;增益分为有源增益和无源增益，收发器 transceiver 产生有源增益，收发器和天线之间使用放大器也会产生有源增益；使用天线聚焦射频信号产生无缘增益，如下图。</description>
    </item>
    <item>
      <title>hugo slug 与 SEO</title>
      <link>https://blog.jaxwang.top/p/hugo-slug-seo/</link>
      <pubDate>Tue, 18 Jun 2024 21:47:30 +0800</pubDate>
      <guid>https://blog.jaxwang.top/p/hugo-slug-seo/</guid>
      <description>What is SEO? Search Engine Optimization，搜索引擎优化，是指通过一系列优化技术和策略，提高网站在搜索引擎结果页面（SERPs）中的排名。&#xA;当然这里的优化技术不是某度的竞价排名。&#xA;What is slug? &amp;ldquo;slug&amp;rdquo; 是一个术语，通常指的是一种友好的URL标识符。具体来说，slug 是用于标识一篇文章、页面或其他内容的一段文本字符串，通常是可读的，便于用户理解和搜索引擎优化（SEO）。&#xA;slug 作为 url 的重要内容，我们还要对其进行优化：&#xA;避免停用词，如 &amp;ldquo;and&amp;rdquo;, &amp;ldquo;or&amp;rdquo;, &amp;ldquo;but&amp;rdquo;, &amp;ldquo;the&amp;rdquo;, &amp;ldquo;a&amp;rdquo; 通常不影响内容的理解 使用关键词 slug in Hugo 设置 permalinks 启用 slug 作为 url。&#xA;[permalinks] note = &amp;quot;/note/:year/:month/:day/:slug/&amp;quot; post = &amp;quot;/p/:slug/&amp;quot; 在 Hugo 中，可以在每篇文章的 Front Matter 中设置 slug。&#xA;如果 slug 没有设置，那么 hugo 会使用 title 作为 slut 的缺省值。&#xA;通常我们设置一个 slug 之后，hugo 还会进行优化：&#xA;转化所有内容为小写 使用 - 替代空格 删除所有特殊字符 </description>
    </item>
    <item>
      <title>Github Pages 自定义域名</title>
      <link>https://blog.jaxwang.top/p/githugpages-custom-domain/</link>
      <pubDate>Sun, 16 Jun 2024 10:02:46 +0800</pubDate>
      <guid>https://blog.jaxwang.top/p/githugpages-custom-domain/</guid>
      <description>https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site&#xA;要设置 www 或自定义子域（例如 www.example.com 或 blog.example.com），必须在存储库设置中添加你的域。 然后，通过 DNS 提供商配置 CNAME 记录。&#xA;关于域名解析记录的分类&#xA;类型 用途 A 用于将域名解析到 IPv4 address AAAA 用于将域名解析到 IPv6 address CNAME 用于将域名解析到另一个域名 Canonical Name </description>
    </item>
    <item>
      <title>Namesilo 域名解析到 CloudFlare</title>
      <link>https://blog.jaxwang.top/p/namesilo-transfer-cloudflare/</link>
      <pubDate>Sun, 16 Jun 2024 00:02:46 +0800</pubDate>
      <guid>https://blog.jaxwang.top/p/namesilo-transfer-cloudflare/</guid>
      <description>购买流程就不详细描述了，从域名注册和使用 Cloudflare 解析开始写。 CloudFlare 提供域名解析服务，而且有免费 Plan 可以使用，因此下述流程的原理： 更换域名的默认解析服务器为 CloudFlare 域名解析服务器。</description>
    </item>
    <item>
      <title>使用 CloudFlare R2 搭建图床</title>
      <link>https://blog.jaxwang.top/p/cloudflare-r2-image/</link>
      <pubDate>Sat, 15 Jun 2024 10:02:46 +0800</pubDate>
      <guid>https://blog.jaxwang.top/p/cloudflare-r2-image/</guid>
      <description>为什么选择 Cloudflare R2 白嫖！白嫖！还是 TMD 白嫖！&#xA;R2 计费基于存储的数据总量及对数据执行的两类操作。无需支付任何出口费用。免费额度对于我们个人用户完全够用。(不被盗刷的情下)&#xA;创建 Bucket 配置 Bucket 桶创建完毕之后，我们需要配置 Bucket，主要是添加自定义域名和创建令牌。前者用来公共访问我们 Bucket 中的文件，后者用来帮助我们上传到 Bucket。&#xA;配置自定义域名：设置 -&amp;gt; 公开访问 -&amp;gt; 连接域&#xA;这里有 3 点要讲的：&#xA;自定义是用来公开访问我们的桶的 我们可以购买域名，然后在 Cloudflare 中注册管理 注册管理域名之后，可以在域中添加已经注册的域或子域 至于如何购买域名，在 CloudFlare 中注册可以 google it，或许我后面会出一期教程&#xA;创建令牌：管理令牌 -&amp;gt; 创建令牌&#xA;至此，令牌创建完毕，不要急着关闭此页面。&#xA;配置 PicGo PicGo 工具主要是用来帮助我们将图片上传到 R2 中。&#xA;首先安装上插件 S3。</description>
    </item>
  </channel>
</rss>
