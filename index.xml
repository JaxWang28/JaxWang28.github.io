<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on Jackson Blog</title>
    <link>https://blog.jaxwang.top/</link>
    <description>Recent content in Home on Jackson Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 16 May 2025 14:12:00 +0800</lastBuildDate>
    <atom:link href="https://blog.jaxwang.top/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>I2C 通信协议</title>
      <link>https://blog.jaxwang.top/p/i2c-protocol/</link>
      <pubDate>Fri, 16 May 2025 14:12:00 +0800</pubDate>
      <guid>https://blog.jaxwang.top/p/i2c-protocol/</guid>
      <description>&lt;h1 id=&#34;i2c-通信协议&#34;&gt;I2C 通信协议&lt;/h1&gt;&#xA;&lt;p&gt;I2C 是一种半双工&lt;strong&gt;系统内部协议&lt;/strong&gt;，即在系统内多个集成电路(IC)间的通讯。其支持 3 种传输模式，本文不对 3 种传输模式展开，仅分析基本原理。&lt;/p&gt;&#xA;&lt;h2 id=&#34;一物理层&#34;&gt;一、物理层&lt;/h2&gt;&#xA;&lt;p&gt;I2C 通信设备之间的常用连接方式如下：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img.jaxwang.top/2025/05/1746f76b8a598ac9083caf25e73ea9cc.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一条 I2C 总线包含两条线路：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;SDA：双向串行数据线，用来传输数据&lt;/li&gt;&#xA;&lt;li&gt;SCL：串行时钟线，用来同步时钟&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;一条 I2C 通信总线可以连接多个 I2C 通信设备，包含多个主机或从机&lt;/li&gt;&#xA;&lt;li&gt;每个总线上的设备都有一个独立的地址，主机利用这个地址访问不同的从机设备&lt;/li&gt;&#xA;&lt;li&gt;总线通过上拉电阻接到电源。当I2C设备空闲时，会输出高阻态， 而当所有设备都空闲，都输出高阻态时，由上拉电阻把总线拉成高电平&lt;/li&gt;&#xA;&lt;li&gt;多个主机同时使用总线时，为了防止数据冲突， 会利用仲裁方式决定由哪个设备占用总线&lt;/li&gt;&#xA;&lt;li&gt;连接到相同总线的 IC 数量受到总线的最大电容 400pF 限制&lt;/li&gt;&#xA;&lt;li&gt;I2C 总线具有 3 种传输模式：&#xA;&lt;ol&gt;&#xA;&lt;li&gt;标准模式：100kbps&lt;/li&gt;&#xA;&lt;li&gt;快速模式：400kbps&lt;/li&gt;&#xA;&lt;li&gt;高速模式：3.4Mbps，目前大多数 I2C 设备尚不支持&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;关于 I2C 为什么使用上拉电阻，有下面 3 个原因（数电知识）：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;SDA和SCL线均为漏极开路驱动器&lt;/li&gt;&#xA;&lt;li&gt;它可以将输出驱动为低电平，将其驱动为高电平&lt;/li&gt;&#xA;&lt;li&gt;为了使线路能够变高，您必须提供上拉电阻&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;不同于 RS-232 为异步通信需要设置波特率，I2C 拥有一条时钟线，为同步传输，其数据有效性如下：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;SCL为高电平的时候SDA表示的数据有效：SDA 为高电平时表示逻辑1， 为低电平时表示逻辑0&lt;/li&gt;&#xA;&lt;li&gt;SCL为低电平的时候SDA表示的数据无效：SDA 一般在这个时候进行电平切换&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img.jaxwang.top/2025/05/b023386cd13cf1971813db9ee2b7c1f4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;二协议层&#34;&gt;二、协议层&lt;/h2&gt;&#xA;&lt;p&gt;I2C 的通信过程是&lt;strong&gt;由主机发起的，支持主机写数据到从机和主机在从机中读数据&lt;/strong&gt;，其过程如下图：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img.jaxwang.top/2025/05/2b0cafa288aa0740a608ca59a5ae7cb3.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img.jaxwang.top/2025/05/00b6f43c6d80736921627bb7b5741d56.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;起始信号 S 当 SCL 线是高电平时 SDA 线从高电平向低电平切换，这个情况表示通讯的起始。起始和停止信号一般由主机产生。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img.jaxwang.top/2025/05/35e8b3ffbcc8f9e9f2f561d07c69755d.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>RS-232 串口通信协议</title>
      <link>https://blog.jaxwang.top/p/rs232-protocol/</link>
      <pubDate>Fri, 16 May 2025 12:12:00 +0800</pubDate>
      <guid>https://blog.jaxwang.top/p/rs232-protocol/</guid>
      <description>&lt;h1 id=&#34;rs-232-串口通信协议&#34;&gt;RS-232 串口通信协议&lt;/h1&gt;&#xA;&lt;p&gt;串口通信（Serial Communication）是一种常用的全双工&lt;strong&gt;系统间通信方式&lt;/strong&gt;。其使用 RS-232 标准。本文将从物理层和协议层讲解 RS-232 标准。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img.jaxwang.top/2025/05/8f404cbc844bb57a6d272703ad138a10.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;一物理层&#34;&gt;一、物理层&lt;/h2&gt;&#xA;&lt;p&gt;RS-232 标准使用 9 根信号线，其接口被称为 COM 口（DB9 口）。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img.jaxwang.top/2025/05/a8aa058ba5200ee1e3184705e041e59a.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img.jaxwang.top/2025/05/010bcb3789abb61752b58e1c34a42168.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在目前的其它工业控制使用的串口通讯中，&lt;strong&gt;一般只使用RXD、TXD以及GND三条信号线&lt;/strong&gt;， 直接传输数据信号，而RTS、CTS、DSR、DTR及DCD信号都被裁剪掉了。&lt;/p&gt;&#xA;&lt;p&gt;常见的电子电路中常使用 TTL 的电平标准，使用 5V 表示逻辑1，使用 0V 表示逻辑0。但是为了提升远距离传输和抗干扰能力，RS-232 标准使用 -15V 表示逻辑1，+15V 表示逻辑0。因为控制器一般使用TTL电平标准，所以常常会使用MAX3232芯片对TTL及RS-232电平的信号进行互相转换。&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;电平标准&lt;/th&gt;&#xA;          &lt;th&gt;描述&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;5V TTL&lt;/td&gt;&#xA;          &lt;td&gt;逻辑1: 2.4 ~ 5V&lt;br&gt;逻辑0: 0 ~ 0.5V&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;RS-232&lt;/td&gt;&#xA;          &lt;td&gt;逻辑1: -15 ~ -3V&lt;br&gt;逻辑0: +3 ~ +15V&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;center&gt;&lt;img src=&#34;https://img.jaxwang.top/2025/05/5b401a051ccc7b9af23048dc20e26626.png&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt; &lt;/center&gt;&#xA;&lt;h2 id=&#34;二协议层&#34;&gt;二、协议层&lt;/h2&gt;&#xA;&lt;p&gt;RS-232 标准的数据包由发送端的 TXD 接口发送到接收端的 RXD 接口。其数据包由&lt;strong&gt;起始位、数据位、校验位和停止位&lt;/strong&gt;组成。通信双方必须对数据包的格式约定一致才可正确通信。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://img.jaxwang.top/2025/05/865e7a5f6476c480303a824543d8ad10.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;空闲：空闲时一直处于高电位即逻辑1&lt;/li&gt;&#xA;&lt;li&gt;起始位：数据包的起始信号由一个逻辑0的数据位表示&lt;/li&gt;&#xA;&lt;li&gt;有效数据：有效数据的长度常被约定为5、6、7或8位长&lt;/li&gt;&#xA;&lt;li&gt;数据检验：检验方法有奇校验(odd)、偶校验(even)、0校验(space)、1校验(mark)以及无校验(noparity)&lt;/li&gt;&#xA;&lt;li&gt;停止位：数据包的停止信号可由0.5、1、1.5或2个逻辑1的数据位表示，只要双方约定一致即可&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;center&gt;&lt;img src=&#34;https://img.jaxwang.top/2025/05/3f09d2ad784bdaa1d3ad0034f6636a0d.png&#34;  alt=&#34;串口软件配置界面&#34; width=&#34;70%&#34; height=&#34;70%&#34;&gt; &lt;/center&gt;&#xA;&lt;p&gt;由于 RS-232 是串口异步通讯，即通信过程中没有时钟信号（DB9接口中是没有时钟信号的），所以两个通讯设备之间需要约定好波特率，即每个码元的长度，以便对信号进行解码。常见的波特率为4800、9600、115200等。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ref&#34;&gt;Ref&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://doc.embedfire.com/mcu/stm32/f103badao/std/zh/latest/book/USART.html&#34;&gt;https://doc.embedfire.com/mcu/stm32/f103badao/std/zh/latest/book/USART.html&lt;/a&gt; 野火STM32&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux Kernel 数据结构分析之链表</title>
      <link>https://blog.jaxwang.top/p/linux-data-structure-list/</link>
      <pubDate>Wed, 30 Apr 2025 15:07:00 +0800</pubDate>
      <guid>https://blog.jaxwang.top/p/linux-data-structure-list/</guid>
      <description>&lt;h1 id=&#34;linux-kernel-数据结构分析之链表&#34;&gt;Linux Kernel 数据结构分析之链表&lt;/h1&gt;&#xA;&lt;p&gt;Linux Kernel 中实现了以下两种链表：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;双向循环链表&lt;/li&gt;&#xA;&lt;li&gt;hash 链表&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;本文将分别分析两种链表的实现。&lt;/p&gt;&#xA;&lt;h2 id=&#34;一双向循环链表&#34;&gt;一、双向循环链表&lt;/h2&gt;&#xA;&lt;p&gt;Linux 使用了最简洁的方式实现了一个几乎是万能的链表，其通过将 &lt;code&gt;struct list_head&lt;/code&gt; &lt;strong&gt;嵌入到其他结构体中&lt;/strong&gt;，实现双向循环链表。并在 &lt;code&gt;include/linux/list.h&lt;/code&gt; 定义了支持的所有操作。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;// include/linux/types.h&#xA;&#xA;struct list_head {&#xA;&#x9;struct list_head *next, *prev;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;以 &lt;code&gt;keme_caches&lt;/code&gt; 链表进行分析。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// mm/slab_common.c&#xA;&#xA;LIST_HEAD(slab_caches);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;// mm/slab.h&#xA;&#xA;struct kmem_cache {&#xA;    ....&#xA;    struct list_head list;&#x9;&#x9;/* List of slab caches */&#xA;    ....&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;center&gt;&lt;img src=&#34;https://img.jaxwang.top/2025/04/c8590fa84ab49e876bb5296f2dc13712.png&#34; width=&#34;70%&#34; height=&#34;70%&#34;&gt; &lt;/center&gt;&#xA;&lt;p&gt;上面的例子中，指针指向是 &lt;code&gt;struct kmem_cache&lt;/code&gt; 中 &lt;code&gt;list&lt;/code&gt; 成员。通过这个成员的地址获得 &lt;code&gt;struct kmem_cache&lt;/code&gt; 的地址的操作，在 Linux 中通过 &lt;code&gt;list_entry&lt;/code&gt; 实现。下面分析其实现逻辑。&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;// include/linux/list.h&#xA;&#xA;/**&#xA; * list_entry - get the struct for this entry&#xA; * @ptr:&#x9;the &amp;amp;struct list_head pointer.&#xA; * @type:&#x9;the type of the struct this is embedded in.&#xA; * @member:&#x9;the name of the list_head within the struct.&#xA; */&#xA;#define list_entry(ptr, type, member) \&#xA;&#x9;container_of(ptr, type, member)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;// include/linux/container_of.h&#xA;&#xA;/**&#xA; * container_of - cast a member of a structure out to the containing structure&#xA; * @ptr:&#x9;the pointer to the member.&#xA; * @type:&#x9;the type of the container struct this is embedded in.&#xA; * @member:&#x9;the name of the member within the struct.&#xA; *&#xA; * WARNING: any const qualifier of @ptr is lost.&#xA; */&#xA;#define container_of(ptr, type, member) ({&#x9;&#x9;&#x9;&#x9;\&#xA;&#x9;void *__mptr = (void *)(ptr);&#x9;&#x9;&#x9;&#x9;&#x9;\&#xA;&#x9;static_assert(__same_type(*(ptr), ((type *)0)-&amp;gt;member) ||&#x9;\&#xA;&#x9;&#x9;      __same_type(*(ptr), void),&#x9;&#x9;&#x9;\&#xA;&#x9;&#x9;      &amp;quot;pointer type mismatch in container_of()&amp;quot;);&#x9;\&#xA;&#x9;((type *)(__mptr - offsetof(type, member))); })&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;// tools/include/linux/kernel.h&#xA;&#xA;#ifndef offsetof&#xA;#define offsetof(TYPE, MEMBER) ((size_t) &amp;amp;((TYPE *)0)-&amp;gt;MEMBER)&#xA;#endif&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;offsetof&lt;/code&gt; 计算结构体中某个成员的偏移量，其通过强转假设地址 0 处有一个 TYPE 类型的结构体，&lt;code&gt;-&amp;gt;&lt;/code&gt;指针取结构体成员 Member，最后通过 &lt;code&gt;&amp;amp;&lt;/code&gt; 获得 Member 的地址，并强转为 &lt;code&gt;size_t&lt;/code&gt; 类型。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;container_of&lt;/code&gt; 利用成员指针，获得结构体的指针。&lt;strong&gt;成员指针 - 成员的偏移量=结构体指针&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;list_entry&lt;/code&gt; list_head 作为一个成员嵌入到结构体中，已知 list_head 指针，调用 &lt;code&gt;container_of&lt;/code&gt; 获得结构体指针。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;二hash-链表&#34;&gt;二、hash 链表&lt;/h2&gt;&#xA;&lt;p&gt;linux kernel 中定义 &lt;code&gt;hlist_head&lt;/code&gt; 用作 hash 表中的链表头，&lt;code&gt;hlist_node&lt;/code&gt; 用作链表中的某一项。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux Kernel 内存管理之物理内存模型</title>
      <link>https://blog.jaxwang.top/p/linux-kernel-memory-physical-memory-model/</link>
      <pubDate>Tue, 29 Apr 2025 16:30:00 +0800</pubDate>
      <guid>https://blog.jaxwang.top/p/linux-kernel-memory-physical-memory-model/</guid>
      <description>&lt;h1 id=&#34;linux-kernel-内存管理之物理内存模型&#34;&gt;Linux Kernel 内存管理之物理内存模型&lt;/h1&gt;&#xA;&lt;p&gt;4GB RAM 4KB 页面大小的 Linux 系统会产生一百万之多的 &lt;code&gt;struct page&lt;/code&gt;，组织管理这些结构体的方式我们称为内存模型。Linux 目前支持两种模型：&lt;code&gt;FLATMEM&lt;/code&gt; &lt;code&gt;SPARSEMEM&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;p&gt;无论选择哪个内存模型，都会通过&lt;strong&gt;一个或多个数组&lt;/strong&gt;管理 &lt;code&gt;struct page&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;一内存空洞-memory-hole&#34;&gt;一、内存空洞 memory hole&lt;/h2&gt;&#xA;&lt;p&gt;事实上 RAM 只是物理地址空间的一部分，物理地址空间通常会出现一部分地址是不用做普通内存使用的，对于这地址我们称之为&lt;strong&gt;内存空洞 Memory Hole&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;使用 &lt;code&gt;qemu-system-x86_64 -m 8G &lt;/code&gt; 启动 Kernel，可以看到下面 log&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;[    0.000000] BIOS-provided physical RAM map:&#xA;[    0.000000] BIOS-e820: [mem 0x0000000000000000-0x000000000009fbff] usable&#xA;[    0.000000] BIOS-e820: [mem 0x000000000009fc00-0x000000000009ffff] reserved&#xA;[    0.000000] BIOS-e820: [mem 0x00000000000f0000-0x00000000000fffff] reserved&#xA;[    0.000000] BIOS-e820: [mem 0x0000000000100000-0x00000000bffdffff] usable&#xA;[    0.000000] BIOS-e820: [mem 0x00000000bffe0000-0x00000000bfffffff] reserved&#xA;[    0.000000] BIOS-e820: [mem 0x00000000fffc0000-0x00000000ffffffff] reserved&#xA;[    0.000000] BIOS-e820: [mem 0x0000000100000000-0x000000023fffffff] usable&#xA;[    0.000000] BIOS-e820: [mem 0x000000fd00000000-0x000000ffffffffff] reserved&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;对于其中 &lt;code&gt;reserved&lt;/code&gt; 的部分是不可作为普通内存使用的。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
